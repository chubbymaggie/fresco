<chapter><title>MVC</title>
  <para>
    <!-- talk about MVC -->MVC is short for "Model, View, Controller", and
    is a design technique frequently adopted by object-based programs to
    assist in modularity, flexibility and reuse. As you can guess, it
    involves separating the objects in a particular interaction sequence
    into 3 categories, each of which supports a general-purpose interface
    through which it is known to the other 2. </para>

    <para>Many programs pay a certain quantity of lip service to MVC, but
    Berlin adopts it as a central technique through all its systems,
    internally as well as when communicating with applications in separate
    processes. It is very important to understand how and why we use MVC.
  </para>
  <section><title>why separate?</title>
    <para>
      <!-- talk about why separate? -->Separating a program into Model, View
      and Controller has a number of important advantages over attacking all
      three concepts at once. First and foremost, it provides a natural set of      
      encapsulation boundaries, which helps reduce program interdependencies
      and interactions, and thus reduce bugs and enhance program
      comprehension. Secondly, the separation encourages many-to-many
      relationships along the component boundaries, which (as it turns out) is
      implicit in many program requirements from the onset. For instance,
      having a model separated from the controller makes it very easy to adapt
      your model to simultaneous manipulation by multiple parties, such as
      remote users or script engines, or by manipulation through previously
      unknown event types. Likewise having separate view components makes it
      easy to produce multiple views of the same model (for simultaneous
      interaction through different representations) and to adapt to novel
      representations. In our case, the MVC separation is also an ideal set of
      boundaries along which to make a switch between programming languages or
      process address spaces (as allowed by CORBA). We make it a common
      practise to store some or all of a data model in a client application,
      and most of the controller and model components in the display server
      where they have high-bandwidth access to display and input
      hardware. 
    </para>
  </section>
  <section><title>application space vs. representation space</title>
    <para>
      <!-- talk about application space vs. representation space -->The
      aforementionned separation between process address spaces is, in
      general, referred to as the client/server separation. In many windowing
      systems, the client stores the majority of data structures, and the
      display server stores the minimum data required to represent its drawing
      state. In fresco, we have much more flexibility over storage locations,
      for two reasons: the client/server communication protocol is generated
      automatically by the CORBA stub compiler, so it is very easy to add
      semantically rich concepts to its "vocabulary"; and the display server
      has no special operating-system level privilidges, so can be much more
      promiscuous about the sort of dynamic extensions it loads. The resulting
      flexibility means that we can load most of the representation code of a
      user interface metaphor into the display server, and just "attach"
      application models, running in separate processes, to the UI at
      appropriate places. This separation between "representation space" and
      "application space" gives us concrete advantages: applications written
      in simple scripting languages have access to powerful UI components,
      accessibility mechanisms and user preferences (like "themes") have a
      more universal effect on applications, network traffic is greatly
      reduced, multiple representations can be attached to the same
      application relatively painlessly, and application writers do not need
      to know as much about the device they are drawing to.
    </para>
  </section>
  <section><title>models in application space</title>
    <para>
      <!-- talk about models in application space -->Models support a common
      interface, which we have named <classname>Subject</classname> in order
      to be familliar to Java programmers. It includes operations for adding
      and removing <classname>Observers</classname> (such as
      <classname>Views</classname>, as well as a common notification method
      which a client (or the model itself) should call when observers should
      be notified of a change to the model. In addition, most models subclass
      the <classname>Subject</classname> interface a little, to provide
      accessors for their concrete datatype.
    </para>
    <section><title>a special case: Controllers</title>
      <para>
	<!-- talk about the Controller and it's state -->A good example which helps
        illustrating the purpose of the MVC paradigm is the separation of data and
        presentation within the Controller. As we have seen in the previous chapter,
        the controller's job is to process input events. In fact, it <emphasis>interprets
        </emphasis>the event and maps it to (observable) state changes. Events as such
        are considered a private means between the server and the Controller for notification.
        Therefor, focus changes and event reception isn't visible for the outer world.
        However, the Controller is tightly coupled to a model, which represents it's state.
        In fact, this coupling is so tight that we chose to implement it within the same
        object. It's a <classname>Telltale</classname> <emphasis>inside</emphasis> the controller 
        which serves this purpose. A typical controller implementation will set appropriate flags
        in this telltale which are observable.
        In other words - you never ask the controller whether it has keyboard focus or whether
        it holds a grab for a positional device. You ask whether it is <emphasis>active</emphasis>,
        <emphasis>pressed</emphasis>, <emphasis>choosen</emphasis>, etc. For buttons for example
        you typically use frames or highlights to reflect these state flags.
        This decoupling has the advantage that you can customize the behavior - i.e. the mapping 
        from events to these semantic flags - and therefor have greater freedom to adapt the interface 
        to your own needs. Here are the predefined flags declared in the Telltale interface:
        <table frame="all">
          <title>predefined telltale flags</title>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>enabled</entry>
                <entry>the controller is enabled if it can receive events</entry>
              </row>
              <row>
                <entry>active</entry>
                <entry>a button click or the Enter key would press it</entry>
              </row>
              <row>
                <entry>pressed</entry>
                <entry>controller is being pressed</entry>
              </row>
              <row>
                <entry>chosen</entry>
                <entry>a flag used in toggable widgets</entry>
              </row>
              <row>
                <entry>running</entry>
                <entry>indicates that an associated command is being executed</entry>
              </row>
              <row>
                <entry>...</entry>
                <entry>...</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section><title>concrete examples</title>
      <para>
	<!-- talk about concrete examples -->Here we give some examples of
	Models which fresco has pre-made interfaces for observing and
	modifying. They should help convey the idea of Model, if it's not yet
	clear.
      </para>
      <section><title>bounded values</title>
        <para>
	  <!-- talk about bounded values -->A <classname>BoundedValue</classname>
	  is a double precision floating point value with some built-in named
 	  incriments. The incriments are important, because it allows
	  general-purpose controllers to be constructed which "step through" the
	  numeric range without needing to care exactly how large the range is or
	  what the incriments of stepping are. When the value is changed, the
	  <classname>BoundedValue</classname> inspects the change to make sure it
	  represents an actual numeric difference (this step is important to avoid
	  notification loops) and then notifies all observers.
        </para>
      </section>
      <section><title>telltales</title>
        <para>
	  <!-- talk about telltales --><classname>Telltales</classname> represent
	  sets of flags, each of which can be independently tested, set or
	  unset. The flags are named to correspond to common "switchable" states
	  that UI controls can assume, such as enabled, visible, active, chosen,
	  running, stepping, choosable, toggle. These names are chosen in order to
	  allow telltales to, amongst other things, be used to model the state of
	  a controller itself. 
        </para>
      </section>
      <section><title>strings</title>
        <para>
	  <!-- talk about strings -->Strings, the most common example that we all
	  know and love, are slightly more complex in fresco since we use the
	  Unicode text encoding internally. Specifically, every time text is
	  changed in a modifiable string buffer, we must re-chunk the text into
	  indivisible units (not the same as characters), and then sequentially
	  process any unit which was changed by re-rendering it into glyphs. This
	  feature alone precludes making a 1:1 correspondence between the text
	  "model" and any view or control of it. 
        </para>
      </section>
    </section>
  </section>
  <section><title>views in representation space</title>
    <para>      
      <!-- talk about views in representation space -->As discussed
      previously, views of models (a.k.a. "representation space") reside
      primarily though not exclusively in the display server process. While it
      is possible to attach remote "view" nodes to the scene graph, 2 reasons
      prevent this from occuring in the common case: CORBA itself is somewhat
      slow when making a large number of inter-process calls, and doing so
      would also eliminate any user preferences which might effect the view's
      concrete appearance. Since part of our goal is to allow users to
      centrally enforce their preferences across all UI elements, the second
      issue is considered quite serious. It is recommended that you let the
      server construct views for you in as many cases as possible.
    </para>
    <section><title>concete examples</title>
      <para>
	<!-- talk about concete examples -->Here we give some specific views of
	abstract models. This will help set the concept of
	<classname>View</classname>.
      </para>
      <section><title>radio boxes</title>
        <para>
 	  <!-- talk about radio boxes -->Radio boxes are a specific view of a set
	  of mutually excluside telltales. Selecting one will unselect any
	  other. They are usually presented with a set of labelled, bevelled discs
	  or rectangles, possibly with checkmarks drawn on top of them. 
        </para>
      </section>
      <section><title>sliders</title>
        <para>
	  <!-- talk about sliders -->Sliders are a specific view of a
	  <classname>BoundedValue</classname>. 
        </para>
      </section>
      <section><title>text glyphs</title>
        <para>
	  <!-- talk about text glyphs -->
        </para>
      </section>
    </section>
  </section>
  <section><title>controllers: bridging spaces</title>
    <para>
      <!-- talk about controllers: bridging spaces -->
    </para>
    <section><title>concrete examples</title>
      <para>
	<!-- talk about concrete examples -->
      </para>
      <section><title>incrimenting a value</title>
        <para>
	  <!-- talk about incrimenting a value -->
        </para>
      </section>
      <section><title>editing a buffer</title>
        <para>
	  <!-- talk about editing a buffer -->
        </para>
      </section>
      <section><title>executing a command </title>
        <para>
	  <!-- talk about executing a command  -->
        </para>
      </section>
    </section>
  </section>
</chapter>
