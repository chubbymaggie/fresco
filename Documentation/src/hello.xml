<chapter><title>Getting Started</title>
  <para>
    <!-- talk about setting up fresco and writing a first little applet -->
  </para>
  <section>
    <title>finding the server</title>
    <para>
      The first thing to do when starting a client is to get a reference to the server object. The display server
      advertises its service to the naming service, such that the client can look it up there. The name server
      is a separate process, whos address is configured into the CORBA runtime environment of all programs, such
      that you can look it up as an 'initial reference'. The name server returns an 'Interoperable Object Reference'
      (IOR), which the client uses for direct requests.
      <figure id="fig:resolve" float="1">
        <title>a client contacts the server via the naming service</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="figures/resolve.jpg" align="center" format="JPG"/>
          </imageobject>
        </mediaobject>
      </figure>
      Here is the relevant code in python:
    </para>
    <programlisting>
      orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)
      object = orb.resolve_initial_references("NameService");
      ncontext = object._narrow(CosNaming.NamingContext)
      name = [CosNaming.NameComponent("IDL:Warsaw/Server:1.0", "Object")]
      object = ncontext.resolve(name)
      server = object._narrow(Warsaw.Server)
    </programlisting>
    <para>and the same in C++:</para>
    <programlisting>
      CORBA::ORB_var orb = CORBA::ORB_init(argc, argv, "omniORB3");
      CosNaming::NamingContext_var ncontext = resolve_init&lt;CosNaming::NamingContext&gt;(orb, "NameService");
      Server_var server = resolve_name&lt;Server&gt;(ncontext, "IDL:Warsaw/Server:1.0");
    </programlisting>
    <para>
      One of the most frequent errors is a misconfigured naming service, i.e. the ORB is unable to
      retrieve the NameService reference. Make sure your naming server is running, and the ORB is able to communicate
      with it. (Various ORB's provide applets to inspect the naming context graph. You can use these tools as a debugging
      help.)
    </para>
  </section>
  <section>
    <title>establishing a connection</title>
    <para>
      The next step is to register with the server, i.e. to request that it hands you a ServerContext. To authenticate
      yourself, you have to provide a ClientContext object which is able to provide a set of credentials to the server.
      You therefor create a ClientContextImpl object (a 'servant' in CORBA terminology), then you bind it to an abstract
      'CORBA Object', by means of a 'Portable Object Adapter' (POA). The POA manages the demultiplexing of incoming requests,
      i.e. it is responsible that other parties can talk to the servants that are activated with it. Here is the python version: 
    </para>
    <programlisting>
      poa = orb.resolve_initial_references("RootPOA")
      poaManager = poa._get_the_POAManager()
      poaManager.activate()
      ci = ClientContextImpl(map(lambda x:ord(x), "hello world applet"))
      client = ci._this()
      context  = server.create_server_context(client)
    </programlisting>
    <para>and the same in C++:</para>
    <programlisting>
      PortableServer::POA_var poa = resolve_init&lt;PortableServer::POA&gt;(orb, "RootPOA");
      PortableServer::POAManager_var pman = poa->the_POAManager();
      pman->activate();
      ClientContextImpl *ci = new ClientContextImpl(Unicode::to_CORBA(Babylon::String("hello world applet")));
      ClientContext_var client = ci->_this();
      ServerContext_var context = server->create_server_context(client);
    </programlisting>
  </section>
  <section>
    <title>requesting some kits</title>
    <para>
      Now that you have a ServerContext, you can ask for some resources that are allocated
      in the display server process for you. These resources are generally 'Kits', which are abstract
      factories for various purposes. Most Kits create Graphic nodes that you can insert into the
      scene graph. We allocate here a DesktopKit, which is responsible for top level windows, a TextKit,
      responsible for Text related objects such as simple text labels, or complex text flow objects, a
      a WidgetKit, that generates all the common widgets such as buttons, scrollbars, or choices, and a
      ToolKit, which generates all those little helpers such as color setters that don't fit anywhere else.
      In python that looks so:
    </para>
    <programlisting>
      properties = []
      object  = context.resolve("IDL:Warsaw/DesktopKit:1.0", properties)
      desktop = object._narrow(Warsaw.DesktopKit)
      object  = context.resolve("IDL:Warsaw/TextKit:1.0", properties)
      text    = object._narrow(Warsaw.TextKit)
      object  = context.resolve("IDL:Warsaw/WidgetKit:1.0", properties)
      widgets = object._narrow(Warsaw.WidgetKit)
      object  = context.resolve("IDL:Warsaw/ToolKit:1.0", properties)
      tools   = object._narrow(Warsaw.ToolKit)
    </programlisting>
    <para>and the same in C++:</para>
    <programlisting>
      DesktopKit_var desktop = resolve_kit&lt;DesktopKit&gt;(context, "IDL:Warsaw/DesktopKit:1.0");
      TextKit_var text       = resolve_kit&lt;TextKit&gt;(context, "IDL:Warsaw/TextKit:1.0");
      WidgetKit_var widgets  = resolve_kit&lt;WidgetKit&gt;(context, "IDL:Warsaw/WidgetKit:1.0");
      ToolKit_var tools      = resolve_kit&lt;ToolKit&gt;(context, "IDL:Warsaw/ToolKit:1.0");
    </programlisting>
  </section>
  <section>
  <title>building a scene graph</title>
    <para>
      Now let's build a scene graph for a tiny applet. We'll start with a little text label,
      wrap it into a button, and put that button into a window. In python you write:
    </para>
    <programlisting>
      label = text.chunk(map(lambda x:ord(x), "hello world"))
      black = tools.rgb(label, 0., 0., 0.)
      button = widgets.button(black, Command._nil)
      window = desktop.shell(button, client)
    </programlisting>
    <para>and in C++:</para>
    <programlisting>
      Graphic_var label = text->chunk(Unicode::to_CORBA(Babylon::String("hello world"));
      Graphic_var black = tools->rgb(label, 0., 0., 0.);
      Controller_var button = widgets->button(black, Command::_nil());
      Window_var window = desktop->shell(button, client);
    </programlisting>
  </section>
  <section>
    <title>hello world</title>
    <para>
      To run, we'll just start an endless loop. This works, since the ORB is multi-threaded, so
      some other hidden threads will watch for server callbacks, timers, etc. Of course, you might want
      to do something more exciting in the main thread. In  python you may write:
    </para>
    <programlisting>
      while 1:
        line = sys.stdin.readline()
        if len(line) == 1: break
    </programlisting>
    <para>and in C++:</para>
    <programlisting>
      while (true) Thread::delay(1000);
    </programlisting>
  </section>
</chapter>
