#!/usr/bin/env python
# Python Berlin client that implements a client-side menu
# Copyright (c) 2000 by Stephen Davies
# This file is licensed for use under the GPL.
#
# Tabstop is 8, SoftTabStop is 4, ShiftWidth is 4 (as per last line)
#
# Note that the menu api implemented here resembles more traditional
# state-heavy guis, rather than berlin's lightweight graphic model.
# Disclaimer: This is just an experiment :)

import sys, string
from omniORB import CORBA

# Import Berlin module
import berlin
from berlin import Label, Callback, nullAny

# Import the Warsaw stubs
import Warsaw, Unidraw
import Warsaw__POA

class MenuKit:
    """Pretend kit that builds menu objects"""
    def menu_bar(self):
	"""Returns a menubar object"""
	return MenuBar()
    def menu(self):
	"""Returns a menu object"""
	return Menu()
    def menu_item(self, label, callback):
	return MenuItem(label, None, callback)
    def menu_item_sub(self, label, submenu):
	return MenuItem(label, submenu)

class MenuItem:
    """Encapsulates a Menu item with label and optional submenu and callback.
    TODO: provide api to close all parent popups once an item is selected."""
    def __init__(self, label, submenu=None, callback=None):
	self.label = label
	self.submenu = submenu
	self.callback = callback
	if (self.submenu is not None):
	    self.submenu.parent_item = self
	self.callback_command = None
	self.graphic = None

    def get_command(self):
	"Returns the cached CORBA callback command"
	if self.callback_command is None:
	    self.callback_command = Callback(self.clicked)._this()
	return self.callback_command

    def get_graphic(self):
	"Returns or creates the controller/graphic for this item"
	if self.graphic is None:
	    button = kits.tool.button(Label(self.label), self.get_command())
	    self.graphic = kits.layout.margin(button, 20.)
	return self.graphic

    def close_all(self):
	"Closes this and all parent pulldown menus"
	menu = self.parent_menu
	while menu and not isinstance(menu, MenuBar):
	    kits.desktop.map(menu.get_pulldown(), 0).execute(nullAny)
	    menu = menu.parent_item
	    menu = menu and menu.parent_menu


    def clicked(self, any):
	try:
	    # Call callback
	    if self.callback is not None:
		print "callback:",self.callback
		dir(self.callback)
		self.callback.execute(any)
	    any = CORBA.Any(CORBA.TC_null, None)
	    # Show submenu
	    if self.submenu is not None:
		print "Submenu:"
		print self.submenu
		dir(self.submenu)
		sub = self.submenu.get_pulldown()
		kits.desktop.map(sub, 1).execute(any)
	    # Else close this menu and all parents
	    else: self.close_all()
	except SystemExit:
	    self.close_all()
	except:
	    print "An error occurred somewhere in clicked()"
	    import traceback
	    traceback.print_exc()
	    self.close_all()


class Menu:
    """Encapsulates a vertical menu of MenuItems"""
    def __init__(self, items = []):
	"Creates menu from sequence of items"
	self.items = list(items)
	self.graphic = None
	self.pulldown = None
	self.parent_item = None
	for item in items:
	    item.parent_menu = self
    
    def add_item(self, item):
	self.items.append(item)
	item.parent_menu = self

    def _get_box(self):
	"""Template method to return the box to put the items in. Defaults to
	vbox"""
	return kits.layout.vbox()

    def get_graphic(self):
	"""Returns or creates the controller/graphic for this Menu"""
	if self.graphic is None:
	    # Create menu
	    box = self._get_box()
	    fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.2)
	    frame = kits.tool.frame(box, 10.0, fspec, 1)

	    for item in self.items:
		box.append_graphic(item.get_graphic())
	    
	    group = kits.tool.group(frame)
	    self.graphic = group #kits.desktop.pulldown(group)
	return self.graphic

    def get_pulldown(self):
	"""Returns a top-level pulldown graphic for this Menu"""
	if self.pulldown is None:
	    self.pulldown = kits.desktop.pulldown(self.get_graphic())
	return self.pulldown

class MenuBar(Menu):
    """Subclasses Menu to provide a HORIZONTAL menu bar"""
    def _get_box(self):
	"""Overridden template method that returns a hbox instead"""
	return kits.layout.hbox()

class About:
    text = ["MenuTest","A test of client-side menus","Copyright (c) 2001 by Stephen Davies"]
    def __init__(self):
	"Creates the about box but doesn't map it"
	self.vbox = kits.layout.vbox_align_elements(0.5)
	for line in self.text: 
	    self.vbox.append_graphic(Label(line))
	self.button = kits.widget.button(Label("Okay"), self._get_hide_cmd())
	self.vbox.append_graphic(self.button)
	fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.none, 0)
	self.frame = kits.tool.frame(self.vbox, 0.0, fspec, 1)
	self.group = kits.tool.group(kits.tool.rgb(self.frame, 0.8, 0.8, 0.8))
	self.window = kits.desktop.transient(self.group)
	self._mapper_show = kits.desktop.map(self.window, 1)
	self._mapper_hide = kits.desktop.map(self.window, 0)

    def _get_hide_cmd(self):
	class HideCommand (Warsaw__POA.Command):
	    def __init__(self, about): self.about = about
	    def execute(self, any): self.about._mapper_hide.execute(any)
	return HideCommand(self)._this()

    def cb_show(self, any):
	self._mapper_show.execute(any)

class MenuApp (berlin.App):
    def run(self):
	def add(menu, items): 
	    for item in items: 
		menu.add_item(item)
	    return menu
	kit = MenuKit()
	menu = add(kit.menu_bar(), [
	    kit.menu_item_sub('File', add(kit.menu(), [
		kit.menu_item_sub('New', add(kit.menu(), [
		    kit.menu_item('One', None),
		    kit.menu_item('Two', None),
		    kit.menu_item('Three', None),
		])),
		kit.menu_item('Open...', None),
		kit.menu_item('Close', None),
		kit.menu_item('Quit', Callback(self.exit)),
	    ])),
	    kit.menu_item_sub('Help', add(kit.menu(), [
		kit.menu_item('Contents', None),
		kit.menu_item('About', Callback(About().cb_show)),
	    ])),
	])

	vbox = kits.layout.vbox()
	vbox.append_graphic(menu.get_graphic())
	vbox.append_graphic(kits.layout.fixed_size(None,6400.,4800.))

	self.window = kits.desktop.shell(kits.tool.group(vbox))
	pos = self.window._get_position()
	pos.x = -pos.x; pos.y = -pos.y-200.
	kits.desktop.move(self.window).execute(CORBA.Any(Warsaw._tc_Vertex, pos))
	#pos.x = 6400.; pos.y = 4800.
	#kits.desktop.resize(self.window).execute(CORBA.Any(Warsaw._tc_Vertex, pos))
	#kits.desktop.map(self.window, 1).execute(nullAny)

    def exit(self, any):
	app.quit.set()


def main():
    # Create the singletons
    global app, kits, connection
    connection = berlin.get_connection()
    kits = berlin.get_kits()
    app = MenuApp()

    app.run()

    # Wait for the quit event
    app.quit.wait()

    # Tell the orb to shutdown (and wait for pending calls to complete)
    connection.orb.shutdown(1)

if __name__ == '__main__':
    main()

# vim: ts=8:sts=4:sw=4
