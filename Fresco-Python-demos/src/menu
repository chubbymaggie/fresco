#!/usr/bin/env python
# Python Fresco client that implements a client-side menu
# Copyright (c) 2000 by Stephen Davies
# This file is licensed for use under the GPL.
#
# Tabstop is 8, SoftTabStop is 4, ShiftWidth is 4 (as per last line)
#
# Note that the menu api implemented here resembles more traditional
# state-heavy guis, rather than Fresco's lightweight graphic model.
# Disclaimer: This is just an experiment :)

import sys, string, os
from omniORB import CORBA, PortableServer

# Import the Fresco stubs and client lib
import Fresco, Layout, Fresco__POA
import FrescoClient
from FrescoClient import Label, Callback, nullAny, Babylon

class MenuKitImpl(Fresco__POA.MenuKit):
    """Pretend kit that builds menu objects"""
    def menu_bar(self):
	"""Returns a menubar object"""
	return MenuBar()._this()

    def menu_popup(self):
	"""Returns a menu object"""
	return Menu()._this()
    
    def menu_item(self, root, label, orient, callback):
	return MenuItem(root, label, orient, None, callback)._this()
    
    def submenu_item(self, root, label, orient, submenu):
	return MenuItem(root, label, orient, submenu)._this()

def get_local(object_var, class_obj):
    """Returns the local python object of 'object_var' if it is an instance of
    class_obj, otherwise throws an exception"""
    obj = PortableServer._rootPOA.reference_to_servant(object_var)
    if not isinstance(obj, class_obj): raise TypeError, "Not local object"
    return obj

class MenuItem (FrescoClient.Controller):
    """Encapsulates a Menu item with label and optional submenu and callback.
    TODO: provide api to close all parent popups once an item is selected."""
    def __init__(self, root, label, orient, submenu=None, callback=None):
	pyfresco.PyController.__init__(self, 0)
	self.root = root
	self.label = label
	self.submenu = submenu
	self.callback = callback
	if (self.submenu):
	    #self.submenu.parent_item = self
	    self.sub_pulldown = kits.desktop.pulldown(self.submenu)
	    self.append_controller(self.sub_pulldown)
	self.callback_command = None
	self.__parent_menu = None
	self.__orientation = (orient == Fresco.yaxis)

	# Construct the graphics to display this item
	self.glabel = self.label #Label(self.label)
	#self.label = kits.layout.hmargin_lr_flexible(label,
	#    20., 0., 0., 20., 1000., 0.)
	self.button = self.glabel

	# Construct the dynamic frame that shows when in focus or not
	fspec_out = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.outset, 0.5)
	fspec_none = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.none, 1.0)
	self.frame = kits.tools.dynamic(self.button, 10.,
	    Fresco.Controller.active, fspec_out, fspec_none, 
	    0, self._this())
	self._set_body(self.frame)

	self._set_orientation()

    def _set_orientation(self):
	"0 means show below, 1 means show right"
	if self.__orientation:
	    self.button = kits.layout.hbox_align_elements(0.)
	    self.button.append_graphic(self.glabel)
	    self.button.append_graphic(kits.layout.hfill())
	    if self.submenu:
		fspec_focus = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.outset, 0.8)
		fspec_none = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.outset, 0.3)
		tri = kits.tools.dynamic_triangle(None,
		    10., Fresco.Controller.active, fspec_focus, fspec_none,
		    1, Fresco.ToolKit.right, self._this())
		tri = kits.layout.fixed_size(tri, 140., 140.)
		tri = kits.layout.margin(tri, 30.)
		self.button.append_graphic(tri)
	    self.frame._set_body(self.button)

    def first_focus(self, input_device): # --> boolean
	if 1 and self.submenu and self.root.test(Fresco.Controller.running):
	    if self.parent_controller().is_identical(self.root):
		# Open submenu instead
		self._show_submenu(input_device)
		return 1
	# Request ourself
	parent = self.parent_controller()
	if not parent: return false
	return parent.request_focus(self._this(), input_device)
    def last_focus(self, input_device): # --> boolean
	if 1 and self.submenu and self.root.test(Fresco.Controller.running):
	    if self.parent_controller().is_identical(self.root):
		# Open submenu instead
		self._show_submenu(input_device)
		return 1
	# Request ourself
	parent = self.parent_controller()
	if not parent: return false
	return parent.request_focus(self._this(), input_device)
	
    def get_command(self):
	"Returns the cached CORBA callback command"
	if self.callback_command is None:
	    self.callback_command = Callback(self.clicked)._this()
	return self.callback_command

    def receive_focus(self, focus):
	device = focus._get_device()
	#print self, "receive focus",device
	if device != 0 and not self._test_focus(0):
	    # Grab KB focus too
	    self.request_focus(self._this(), 0)
	return pyfresco.PyController.receive_focus(self, focus)
    def lose_focus(self, device):
	#print self, "lose focus", device
	pyfresco.PyController.lose_focus(self, device)
    def key_press(self, input_event):
	key = input_event[0].attr.selection.number
	device = input_event[0].dev
	parent = self.parent_controller()
	if not self.__orientation: # Horizontal menuitem
	    if key == Babylon.KEY_CURSOR_LEFT:
		self.circular_prev_focus(device)
	    elif key == Babylon.KEY_CURSOR_RIGHT:
		self.circular_next_focus(device)
	    elif key == Babylon.KEY_CURSOR_DOWN and self.submenu:
		self.root.set(Fresco.Controller.running)
		self._show_submenu(device)
	else: # Vertical menuitem
	    if key == Babylon.KEY_CURSOR_UP:
		self.circular_prev_focus(device)
	    elif key == Babylon.KEY_CURSOR_DOWN:
		self.circular_next_focus(device)
	    elif key == Babylon.KEY_CURSOR_RIGHT:
		if self.submenu:
		    # Open submenu
		    self._show_submenu(device)
		else:
		    # FIXME: Move focus to menu of next horizontal item
		    if parent.parent_controller().parent_controller().parent_controller().is_identical(self.root):
			parent.next_focus(device)
		    else:
			pass # FIXME: how to find next horiz?
	    elif key == Babylon.KEY_CURSOR_LEFT:
		# FIXME: Give focus only to parent item (not our menu)
		# (this works, but isn't nice)
		menu = self.parent_controller()
		window = menu.parent_controller()
		item = window.parent_controller()
		item.request_focus(item, device)
    def circular_next_focus(self, input_device): # --> boolean
	parent = self.parent_controller()
	if not parent: return false
	# First locate the next controller in control graph
	iter = parent.first_child_controller()
	first = next = iter.child()
	while next and not self.is_identical(next):
	    iter.next()
	    next = iter.child()
	# If 'self' is not in the list then its an error!
	if not next: raise NameError, 'I wasnt in my parent\'s controllers!'
	iter.next()
	next = iter.child()
	iter.destroy()
	# Now try to pass focus to it
	if not next: next = first
	return next.first_focus(input_device)
    def circular_prev_focus(self, input_device): # --> boolean
	parent = self.parent_controller()
	if not parent: return false
	# First locate the next controller in control graph
	iter = parent.last_child_controller()
	last = prev = iter.child()
	while prev and not self.is_identical(prev):
	    iter.prev()
	    prev = iter.child()
	# If 'self' is not in the list then its an error!
	if not prev: raise NameError, 'I wasnt in my parent\'s controllers!'
	iter.prev()
	prev = iter.child()
	iter.destroy()
	# Now try to pass focus to it
	if prev: return prev.last_focus(input_device)
	# Pass focus to last child
	return last.first_focus(input_device)

    def press(self, traversal, event):
	try:
	    # Call callback
	    if self.callback is not None:
		dir(self.callback)
		self.callback.execute(nullAny)
	    # Show submenu
	    if self.submenu is not None:
		self._show_submenu(event[0].dev)
	    else:
		# Else close this menu and all parents
		try: self.root.request_focus(self.root, 0)
		except CORBA.OBJECT_NOT_EXIST:
		    # Quit will cause this error
		    pass
	except:
	    print "An error occurred somewhere in clicked()"
	    import traceback
	    traceback.print_exc()
    def get_alloc(self):
	alloc = pyfresco.PyAllocation()
	self.allocations(alloc._this())
	info = alloc.get(0) # controller only has one parent
	region = pyfresco.PyRegion()
	pyfresco.PyGraphic.extension(self, info, region._this())
	return region

    def _show_submenu(self, device):
	if not self.submenu: return
	self._move_submenu()
	self.sub_pulldown._set_mapped(1)
	if device != 0:
	    self.request_focus(self.sub_pulldown, 0)
	self.submenu.first_focus(device)

    def _move_submenu(self):
	region = self.get_alloc()
	sub = self.sub_pulldown
	# Move to right place
	lower, upper = region.bounds()
	if self.__orientation:to = Fresco.Vertex(upper.x, lower.y, 0.)
	else: to = Fresco.Vertex(lower.x, upper.y, 0.)
	sub._set_position(to)

class Menu (FrescoClient.Controller):
    """Encapsulates a vertical menu of MenuItems"""
    def __init__(self):
	"Creates menu from sequence of items"
	pyfresco.PyController.__init__(self, 1)
	self.items = []
	self.graphic = None
	self.pulldown = None
	self.parent_item = None
	self._current_submenu = None
	
	self._init()

    def receive_focus(self, focus):
	#print self, "menu receive focus",focus._get_device()
	return pyfresco.PyController.receive_focus(self, focus)
    def lose_focus(self, device):
	#print self, "menu lose focus",device
	pyfresco.PyController.lose_focus(self, device)
    def append_controller(self, item):
	self.items.append(item)
	self._add_item(item)
    def _add_item(self, item):
	#item._set_orientation(1)
	self.box.append_graphic(item)
	pyfresco.PyController.append_controller(self, item)


    def _init(self):
	"""Returns or creates the controller/graphic for this Menu"""
	# Create menu
	self.box = kits.layout.vbox()
	self._set_body(self.box)
	#fspec = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.outset, 0.2)
	#frame = kits.tools.frame(box, 10.0, fspec, 1)

	map(self._add_item, self.items)

class MenuBar(Menu):
    """Subclasses Menu to provide a HORIZONTAL menu bar"""
    def _add_item(self, item):
	self.box.append_graphic(self.hspace)
	self.box.append_graphic(item)
	pyfresco.PyController.append_controller(self, item)
    def _init(self):
	"""Returns or creates the controller/graphic for this Menu"""
	# Create menu
	self.box = kits.layout.hbox_align_elements(0.)

	self.hspace = kits.layout.hspace(80.)
	map(self._add_item, self.items)
	
	spacer_box = kits.layout.hbox()
	spacer_box.append_graphic(self.box)
	spacer_box.append_graphic(kits.layout.hfill())

	fspec = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.outset, 0.2)
	frame = kits.tools.frame(spacer_box, 10.0, fspec, 1)
	
	self._set_body(frame)
    

class About:
    text = ["MenuTest","A test of client-side menus","Copyright (c) 2001 by Stephen Davies"]
    def __init__(self):
	"Creates the about box but doesn't map it"
	self.vbox = kits.layout.vbox_align_elements(0.5)
	for line in self.text: 
	    self.vbox.append_graphic(Label(line))
	self.button = kits.widget.button(Label("Okay"), self._get_hide_cmd())
	self.vbox.append_graphic(self.button)
	fspec = Fresco.ToolKit.FrameSpec(Fresco.ToolKit.none, 0)
	self.frame = kits.tools.frame(self.vbox, 0.0, fspec, 1)
	self.group = kits.tools.group(kits.tools.rgb(self.frame, 0.8, 0.8, 0.8))
	self.window = kits.desktop.transient(self.group)
	self._mapper_show = kits.desktop.map(self.window, 1)
	self._mapper_hide = kits.desktop.map(self.window, 0)

    def _get_hide_cmd(self):
	class HideCommand (Fresco__POA.Command):
	    def __init__(self, about): self.about = about
	    def execute(self, any): self.about._mapper_hide.execute(any)
	return HideCommand(self)._this()

    def cb_show(self, any):
	self._mapper_show.execute(any)

class RunApp(Fresco__POA.Command):
    """Small wrapper command which calls a python function with a single
    argument which is the Any."""
    def __init__(self, command, *args):
	self.command = command
	self.args = (command,)+args
    def execute(self, any):
	print "Running",self.command, self.args
	if os.fork() == 0:
	    os.execvp(self.command, self.args)
	    print "Failed"
	    sys.exit(0)

class MenuApp (FrescoClient.App):
    def run(self):
	def add(menu, items): 
	    for item in items: 
		menu.append_controller(item)
	    return menu
	kit = MenuKitImpl()._this()
	
	H, V = Fresco.xaxis, Fresco.yaxis
	menu = kit.menu_bar()
	add(menu, [
	    kit.submenu_item(menu, Label('Test'), H, add(kit.menu_popup(), [
		kit.submenu_item(menu, Label('New'), V, add(kit.menu_popup(), [
		    kit.menu_item(menu, Label('One'), V, None),
		    kit.menu_item(menu, Label('Two'), V, None),
		    kit.menu_item(menu, Label('Three'), V, None),
		])),
		kit.submenu_item(menu, Label('Submenu'), V, add(kit.menu_popup(), [
		    kit.menu_item(menu, Label('One'), V, None),
		    kit.menu_item(menu, Label('Two'), V, None),
		    kit.menu_item(menu, Label('Three'), V, None),
		])),
		kit.menu_item(menu, Label('Open...'), V, None),
		kit.menu_item(menu, Label('Close'), V, None),
		kit.menu_item(menu, Label('Quit'), V, Callback(self.exit)._this()),
	    ])),
	    kit.submenu_item(menu, Label('Clients'), H, add(kit.menu_popup(), [
		kit.submenu_item(menu, Label('C++'), V, add(kit.menu_popup(), [
		    kit.menu_item(menu, Label('demo'), V, RunApp('demo')._this()),
		    kit.menu_item(menu, Label('canvas'), V, RunApp('canvas','-r','ggi-dots')._this()),
		])),
		kit.submenu_item(menu, Label('Python'), V, add(kit.menu_popup(), [
		    kit.menu_item(menu, Label('demo'), V, RunApp('demo.py')._this()),
		    kit.menu_item(menu, Label('transform'), V, RunApp('transform.py')._this()),
		    kit.menu_item(menu, Label('clock'), V, RunApp('graphictest')._this()),
		])),
	    ])),
	    kit.submenu_item(menu, Label('Help'), H, add(kit.menu_popup(), [
		kit.menu_item(menu, Label('Contents'), V, None),
		kit.menu_item(menu, Label('About'), V, Callback(About().cb_show)._this()),
	    ])),
	])

	vbox = kits.layout.vbox()
	vbox.append_graphic(menu)
	contents = kits.figure.pixmap(kits.rasters.create("marble.png"))
	grid = kits.layout.fixed_grid(Layout.Grid.Index(5,4))
	for i in range(5*4):
	    grid.append_graphic(contents)
	vbox.append_graphic(kits.layout.fixed_size(grid,6400.,4800.))

	group = kits.tools.group(vbox)
	group.append_controller(menu)
	self.window = kits.desktop.shell(group, connection.clientContext)
	self.window._set_position(Fresco.Vertex(0, -210, 0))

	if 0:
	    # Given menu kb focus
	    import time
	    time.sleep(1)
	    print self.window.parent_controller()
	    iter = menu.first_child_controller()
	    first_child = iter.child()
	    iter.destroy()
	    print menu.request_focus(first_child, 0)

    def exit(self, any):
	app.quit.set()


def main():
    # Create the singletons
    global app, kits, connection
    connection = FrescoClient.get_connection()
    kits = FrescoClient.get_kits()
    app = MenuApp()

    app.run()

    # Wait for the quit event
    app.quit.wait()

    # Tell the orb to shutdown (and wait for pending calls to complete)
    connection.orb.shutdown(1)

if __name__ == '__main__':
    main()

# vim: ts=8:sts=4:sw=4
