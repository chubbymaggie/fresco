#!/usr/bin/env python
# Python Berlin client that implements a client-side Graphic
# Copyright (c) 2000 by Stephen Davies
# This file is licensed for use under the GPL.
#
# Tabstop is 8, SoftTabStop is 4, ShiftWidth is 4 (as per last line)
#

import sys, string, time, math, thread, threading
from omniORB import CORBA

# Import berlin client lib
import berlin
from berlin import Label, Callback, nullAny

# Import the Warsaw stubs
import Warsaw, Unidraw
import Warsaw__POA

# Import Warsaw lib
import pywarsaw

class Rotator(Warsaw__POA.Observer):
    def __init__(self, value, child, parent, axis):
        self.__value = value
        self.__child = child
        self.__parent = parent
        self.__axis = axis
        
    def update(self, any):
        degree = self.__value._get_value()
        transform = self.__child.transformation()
        transform.load_identity()
        transform.rotate(degree, self.__axis)
        self.__parent.need_redraw()


X = .525731112119133606 
Z = .850650808352039932

nodes = [(-X, 0.0, Z), (X, 0.0, Z), (-X, 0.0, -Z), (X, 0.0, -Z),    
         (0.0, Z, X), (0.0, Z, -X), (0.0, -Z, X), (0.0, -Z, -X),    
         (Z, X, 0.0), (-Z, X, 0.0), (Z, -X, 0.0), (-Z, -X, 0.0)]

triangles = [(0,4,1), (0,9,4), (9,5,4), (4,5,8), (4,8,1),    
             (8,10,1), (8,3,10), (5,3,8), (5,2,3), (2,7,3),    
             (7,10,3), (7,6,10), (7,11,6), (11,0,6), (0,1,6), 
             (6,1,10), (9,0,11), (9,11,2), (9,2,5), (7,2,11)]

normals = nodes[:]

def generate_mesh(w, h, d):
    scale = lambda x, w=w, h=h, d=d: Warsaw.Vertex(x[0] * w, x[1] * h, x[2] * d)
    triangulate = lambda x: Warsaw.Triangle(x[0], x[1], x[2])
    normalize = lambda x: Warsaw.Vertex(x[0], x[1], x[2])
    return Warsaw.Mesh(map(scale, nodes), map(triangulate, triangles), map(normalize, normals))


class Primitive (pywarsaw.PyGraphic):
    "Simple graphic that draws a clock"
    def __init__(self, w, h, d):
	pywarsaw.PyGraphic.__init__(self)
        self.__width = w
        self.__height = h
        self.__depth = d
        self.__mesh = generate_mesh(w, h, d)
        
    def request(self): # --> Requisition
	x = Warsaw.Graphic.Requirement(1, self.__width, self.__width, self.__width, 0.5)
	y = Warsaw.Graphic.Requirement(1, self.__height, self.__height, self.__height, 0.5)
	z = Warsaw.Graphic.Requirement(1, self.__depth, self.__depth, self.__depth, 0.5)
	req = Warsaw.Graphic.Requisition(x, y, z, 0)
        print "requisition is", req
	return req
    def draw(self, drawTraversal):
	dk = drawTraversal.drawing()
        dk = dk._narrow(Warsaw.DrawingKit3D)
        if not dk:
            print "please run the display server with '-d GLDrawingKit'"
            return
	transform = drawTraversal.current_transformation()
	region = drawTraversal.current_allocation()
        dk.save()
	dk._set_foreground(Warsaw.Color(0.6, 0.6, 1.0, 1.0))
	dk._set_surface_fillstyle(Warsaw.DrawingKit.solid)
	#dk.draw_rectangle(bounds_lower, bounds_upper)
	dk.draw_mesh(self.__mesh)
	dk.restore()

class GraphicApp (berlin.App):
    def run(self):
        vbox = kits.layout.vbox()
	phi = kits.command.bvalue(0., 360., 0., 1., 10.)
	psi = kits.command.bvalue(0., 360., 0., 1., 10.)
        hbox = kits.layout.hbox()
        hbox.append_graphic(kits.layout.hfill())
        hbox.append_graphic(kits.widget.slider(phi, Warsaw.xaxis))
        hbox.append_graphic(kits.layout.hfill())
        vbox.append_graphic(hbox)
        hbox = kits.layout.hbox()
        hbox.append_graphic(kits.layout.hfill())
        hbox.append_graphic(kits.widget.slider(psi, Warsaw.xaxis))
        hbox.append_graphic(kits.layout.hfill())
        vbox.append_graphic(hbox)

	#primitive = Primitive(3000., 3000., 3000.)._this()
        primitive = kits.primitive.geometry(generate_mesh(300., 300., 300.))
        primitive = kits.tool.rgb(primitive, 0.6, 0.6, 1.0)
        root = kits.primitive.root(Warsaw.Graphic._nil)
        # heh, try to figure out what the next few lines do :)
        transformer = kits.primitive.transformer(primitive)
        phi.attach(Rotator(phi, transformer, root, Warsaw.zaxis)._this())
        transformer = kits.primitive.transformer(transformer)
        psi.attach(Rotator(psi, transformer, root, Warsaw.yaxis)._this())
        root._set_body(transformer)
        vbox.prepend_graphic(kits.layout.align(root, 0., 0.))
        spec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.inset, 0.5)
        frame = kits.tool.frame(vbox, 10., spec, 1)
	group = kits.tool.group(frame)
	self.window = kits.desktop.shell(group)

	#kits.desktop.shell(kits.tool.group(TickGraphic()._this()))


def main():
    # Create singletons
    global app, kits, connection
    connection = berlin.get_connection()
    kits = berlin.get_kits()
    app = GraphicApp()

    app.run()

    # Wait for the quit event
    app.quit.wait()

    # Tell the orb to shutdown (and wait for pending calls to complete)
    connection.orb.shutdown(1)

if __name__ == '__main__':
    main()

# vim: ts=8:sts=4:sw=4
