#!/usr/bin/env python

import sys, time
import string

# Import the CORBA module
from omniORB import CORBA
import CosNaming

# Import the Warsaw stubs
import Warsaw
import Warsaw__POA
# Define an implementation of the ClientContext interface
class ClientContextImpl (Warsaw__POA.ClientContext):
    def userName(self): return "joe"
    def ping(self): return

def main():
    # Initialise the ORB
    orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)
    # Find the POA
    poa = orb.resolve_initial_references("RootPOA")
    # Activate the POA
    poaManager = poa._get_the_POAManager()
    poaManager.activate()
    # Create an ClientContext
    ci = ClientContextImpl()
    # Create an object reference, and implicitly activate the object
    client = ci._this()

    # get a server context
    object = orb.resolve_initial_references("NameService");
    context = object._narrow(CosNaming.NamingContext)
    name = [CosNaming.NameComponent("IDL:Warsaw/Server:1.0", "Object")]
    object = context.resolve(name)
    server = object._narrow(Warsaw.Server)
    context  = server.create_server_context(client)

    # get some kits
    properties = []
    object  = context.resolve("IDL:Warsaw/ToolKit:1.0", properties)
    tool    = object._narrow(Warsaw.ToolKit)
    object  = context.resolve("IDL:Warsaw/ImageKit:1.0", properties)
    image   = object._narrow(Warsaw.ImageKit)
    object  = context.resolve("IDL:Warsaw/FigureKit:1.0", properties)
    figure  = object._narrow(Warsaw.FigureKit)
    object  = context.resolve("IDL:Warsaw/DesktopKit:1.0", properties)
    desktop = object._narrow(Warsaw.DesktopKit)
    object  = context.resolve("IDL:Warsaw/LayoutKit:1.0", properties)
    layout = object._narrow(Warsaw.LayoutKit)

    raster = image.create("../etc/PNG/berlin-48.png")
    pixmap = figure.pixmap(raster)
    spec   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.colored, Warsaw.Color(1., 0.5, 0.5, 1.))
    frame1 = tool.frame(pixmap, 50, spec, 1)
    spec   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.colored, Warsaw.Color(0.5, 1., 0.5, 1.))
    frame2 = tool.frame(pixmap, 50, spec, 1)
    spec   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.colored, Warsaw.Color(0.5, 0.5, 1., 1.))
    frame3 = tool.frame(pixmap, 50, spec, 1)
    spec   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.colored, Warsaw.Color(1., 1., 0.5, 1.))
    frame4 = tool.frame(pixmap, 50, spec, 1)
    spec   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.colored, Warsaw.Color(1., 0.5, 1., 1.))
    frame5 = tool.frame(pixmap, 50, spec, 1)
    box    = layout.hbox()
    box.append_graphic(frame1)
    box.append_graphic(frame2)
    box.append_graphic(frame3)
    box.append_graphic(frame4)
    box.append_graphic(frame5)
    group  = tool.group(box)
    shell  = desktop.shell(group)
    iterator = box.first_child_graphic()
    for i in [1,2,3,4,5]:
        iterator.remove()
        time.sleep(1)
    iterator.insert(frame1)
    time.sleep(1)
    iterator.insert(frame2)
    time.sleep(1)
    iterator.insert(frame3)
    time.sleep(1)
    iterator.insert(frame4)
    time.sleep(1)
    iterator.insert(frame5)
    iterator.destroy()
    while 1:
	line = sys.stdin.readline()
	if len(line) == 1: break

if __name__ == '__main__':
    main()
