#!/usr/bin/env python

import sys
import string

# Import the CORBA module
from omniORB import CORBA
import CosNaming

# Import the Warsaw stubs
import Warsaw
import Warsaw__POA
# Define an implementation of the ClientContext interface
class ClientContextImpl (Warsaw__POA.ClientContext):
    def userName(self): return "joe"
    def ping(self): return

def main():
    # Initialise the ORB
    orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)
    # Find the POA
    poa = orb.resolve_initial_references("RootPOA")
    # Activate the POA
    poaManager = poa._get_the_POAManager()
    poaManager.activate()
    # Create an ClientContext
    ci = ClientContextImpl()
    # Create an object reference, and implicitly activate the object
    client = ci._this()

    # get a server context
    object = orb.resolve_initial_references("NameService");
    context = object._narrow(CosNaming.NamingContext)
    name = [CosNaming.NameComponent("IDL:Warsaw/Server:1.0", "Object")]
    object = context.resolve(name)
    server = object._narrow(Warsaw.Server)
    context  = server.newServerContext(client)

    # get some kits
    properties = []
    object  = context.resolve("IDL:Warsaw/ToolKit:1.0", properties)
    tool    = object._narrow(Warsaw.ToolKit)
    object  = context.resolve("IDL:Warsaw/ImageKit:1.0", properties)
    image   = object._narrow(Warsaw.ImageKit)
    object  = context.resolve("IDL:Warsaw/FigureKit:1.0", properties)
    figure  = object._narrow(Warsaw.FigureKit)
    object  = context.resolve("IDL:Warsaw/DesktopKit:1.0", properties)
    desktop = object._narrow(Warsaw.DesktopKit)
    object  = context.resolve("IDL:Warsaw/LayoutKit:1.0", properties)
    layout = object._narrow(Warsaw.LayoutKit)

    raster = image.create("../etc/PNG/berlin-48.png")
    pixmap = figure.pixmap(raster)
    spec1   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.concav, 0.5)
    spec2   = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.convex, 0.5)
    frame1  = tool.frame(pixmap, 100, spec1, 1)
    frame2  = tool.frame(pixmap, 100, spec1, 1)
##    nothing = layout.fixedSize(Warsaw.Graphic._nil, 1000., 1000.)
#    trigger = tool.button(frame, Warsaw.Command._nil)
##    frame  = tool.dynamicTriangle(nothing, 200, Warsaw.Controller.pressed, spec1, spec2, CORBA.TRUE, Warsaw.ToolKit.up, trigger)
##    trigger._set_body(frame)
#    bg = image.create("../etc/PNG/marble.png");
#    texture = figure.texture(trigger, bg);
    box    = layout.hbox()
    box.append(frame1)
    box.append(frame2)
    group  = tool.group(box)
    shell  = desktop.shell(group)
    while 1:
	line = sys.stdin.readline()
	if len(line) == 1: break

if __name__ == '__main__':
    main()
