#!/usr/bin/env python

import sys
import string

# Import the CORBA module
from omniORB import CORBA

# Import the Warsaw stubs
import Warsaw
import POA_Warsaw
import CosNaming
# Define an implementation of the ClientContext interface
class ClientContextImpl (POA_Warsaw.ClientContext):
    def userName(self): return "joe"
    def ping(self): return

def main():
    # Initialise the ORB
    orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)
    # Find the POA
    poa = orb.resolve_initial_references("RootPOA")
    # Activate the POA
    poaManager = poa._get_the_POAManager()
    poaManager.activate()
    # Create an ClientContext
    ci = ClientContextImpl()
    # Create an object reference, and implicitly activate the object
    client = ci._this()

    # get a server context
    context = orb.resolve_initial_references("NameService")
    name = [CosNaming.NameComponent("IDL:Server:1.0", "Object")]
    server = context.resolve(name)
    context  = server.newServerContext(client)

    # get some kits
    properties = []
    object  = context.resolve("IDL:DesktopKit:1.0", properties)
    desktop = object._narrow(Warsaw.DesktopKit)
    object  = context.resolve("IDL:ToolKit:1.0", properties)
    tool    = object._narrow(Warsaw.ToolKit)
    object  = context.resolve("IDL:CommandKit:1.0", properties)
    command = object._narrow(Warsaw.CommandKit)
    object  = context.resolve("IDL:LayoutKit:1.0", properties)
    layout  = object._narrow(Warsaw.LayoutKit)
    object  = context.resolve("IDL:WidgetKit:1.0", properties)
    widget  = object._narrow(Warsaw.WidgetKit)
    object  = context.resolve("IDL:FigureKit:1.0", properties)
    figure  = object._narrow(Warsaw.FigureKit)
    object  = context.resolve("IDL:ImageKit:1.0", properties)
    image   = object._narrow(Warsaw.ImageKit)
    object  = context.resolve("IDL:GadgetKit:1.0", properties)
    gadget  = object._narrow(Warsaw.GadgetKit)

    vbox   = layout.vbox();
    adjustable1 = command.bvalue(-1., 1., 0.1, 0.1, 0.1)
    adjustable2 = command.bvalue(0., 360., 0., 10., 10.)
    vbox.append(layout.align(widget.slider(adjustable1, Warsaw.xaxis), 0.0, 0.0))
    vbox.append(layout.align(widget.slider(adjustable2, Warsaw.xaxis), 0.0, 0.0))
    hbox = layout.hbox()
    rectangle = figure.rectangle(0., 0., 1000., 1000.)
    rectangle._set_type(Warsaw.Figure.fill)
    rectangle._set_foreground(Warsaw.Color(1., 1., 1., 0.9))
    rectangle._set_background(Warsaw.Color(1., 0.5, 0.5, 0.9))
    hbox.append(widget.button(rectangle, Warsaw.Command._nil))
    hbox.append(layout.align(gadget.rotator(layout.align(rectangle, 0.5, 0.5), adjustable1), 0., 0.))
    hbox.append(widget.button(rectangle, Warsaw.Command._nil))
    vbox.append(layout.align(gadget.rotator(layout.align(hbox, 0.5, 0.5), adjustable2), 0., 0.))
    shell = desktop.shell(tool.group(layout.flexible(vbox, 2000., 2000.)))
    while 1:
	line = sys.stdin.readline()
	if len(line) == 1: break

if __name__ == '__main__':
    main()
