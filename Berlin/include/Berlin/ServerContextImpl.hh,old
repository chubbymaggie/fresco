#ifndef _ServerContextImpl_hh
#define _ServerContextImpl_hh

//
// $Id$
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//

#include "Warsaw/config.hh"
#include "Warsaw/ServerContext.hh"
#include "Berlin/Thread.hh"
#include <vector>
#include <string>
#include <map>

declare_corba_ptr_type(Stage)
class GenericFactory_impl;

// this is an encapsulated "entry point" which a client uses to manufacture
// new objects, look up singletons, look up the scene root, etc.

class ServerContextImpl : implements(ServerContext) {

public:  
  ServerContextImpl(CosLifeCycle::FactoryFinder_ptr, ClientContext_ptr client, Stage_ptr root);
  bool verify();

  // stuff declared in IDL, that the client will access
  ClientContext_ptr myClient();
  CosLifeCycle::FactoryFinder_ptr myFactoryFinder();
  Stage_ptr sceneRoot();
  
  CORBA::Object_ptr create(const char *interfaceName) 
      throw (SecurityException, CreationFailureException);
  
  void setSingleton(const char *name, CosLifeCycle::LifeCycleObject_ptr singleton) 
      throw (SecurityException, SingletonFailureException);
  
  void delSingleton(const char *name) 
      throw (SecurityException, SingletonFailureException);   
  
  CosLifeCycle::LifeCycleObject_ptr getSingleton(const char *name) 
      throw (SecurityException, SingletonFailureException);
  

protected:
  
  CosLifeCycle::FactoryFinder_var _ff;
  ClientContext_var _client;
  Mutex _ServerContext_mutex;
  vector<CORBA::Object_var> allocatedObjects;
  
  // things which all sessions share access to
  static map<string, CosLifeCycle::LifeCycleObject_var> singletons;
  static Mutex singletons_mutex;
  static Stage_var ourSceneRoot;
};

#endif
