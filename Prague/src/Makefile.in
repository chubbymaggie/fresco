# $Id$
#
# This source file is a part of the Fresco Project.
# Copyright (C) 1999, 2000 Stefan Seefeld <stefan@fresco.org> 
# http://www.fresco.org
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
# MA 02139, USA.

SHELL		:= /bin/sh

top_srcdir	:= @top_srcdir@
top_builddir	:= @top_builddir@
srcdir		:= @srcdir@
cdir		:= $(top_builddir)/config
hdir		:= $(top_srcdir)/include/Prague
docdir		:= $(top_builddir)/share/doc/Prague

include $(cdir)/local.mk

CXXFLAGS	+= $(SO_CXXFLAGS)
LDFLAGS		+= $(SO_LDFLAGS)

SRC		:= logbuf.cc Tracer.cc regex.cc User.cc Stopwatch.cc Profiler.cc Time.cc \
	  	   File.cc Directory.cc Path.cc GetOpt.cc DataTypeManager.cc \
	  	   DLL.cc MMap.cc SHM.cc Thread.cc Timer.cc Signal.cc Fork.cc \
		   Env.cc
SRC		+= ipcbuf.cc pipebuf.cc sockbuf.cc ptybuf.cc mmapbuf.cc \
	  	   Agent.cc Dispatcher.cc Coprocess.cc PipeAgent.cc TTYAgent.cc SocketAgent.cc
SRC		+= gzbuf.cc# xdrbuf.cc #bzbuf.cc 
SRC		+= protocol.cc echo.cc ftp.cc smtp.cc url.cc

SysH		:= logbuf.hh logstream.hh ntree.hh Tracer.hh regex.hh User.hh \
		   Process.hh Stopwatch.hh Profiler.hh Time.hh \
	  	   File.hh Directory.hh FLock.hh FdSet.hh Path.hh GetOpt.hh \
		   DataTypeManager.hh Memory.hh DLL.hh MMap.hh SHM.hh \
                   Thread.hh ThreadData.hh ThreadQueue.hh ThreadPool.hh \
		   Timer.hh Signal.hh Fork.hh Plugin.hh Env.hh
IPCH		:= ipcbuf.hh pipebuf.hh sockbuf.hh sockstream.hh ptybuf.hh \
		   mmapbuf.hh convert.hh Agent.hh Dispatcher.hh Coprocess.hh \
		   PipeAgent.hh TTYAgent.hh SocketAgent.hh Acceptor.hh \
		   Connector.hh
FilterH		:= gzbuf.hh gzstream.hh# xdrbuf.cc #bzbuf.cc 
NetworkH	:= protocol.hh echo.hh ftp.hh smtp.hh url.hh

HDR		:= config.hh
HDR		+= $(patsubst %, Sys/%, $(SysH))
HDR		+= $(patsubst %, IPC/%, $(IPCH))
HDR		+= $(patsubst %, Filter/%, $(FilterH))
HDR		+= $(patsubst %, Network/%, $(NetworkH))
DEP		:= $(patsubst %.cc, %.d, $(SRC))
OBJ		:= $(patsubst %.cc, %.o, $(SRC))
HSYN		:= $(patsubst %, %.syn, $(notdir $(HDR)))
SSYN		:= $(patsubst %, %.syn, $(SRC))
SYN		:= $(HSYN) $(SSYN)
XREF		:= $(patsubst %, %.xref, $(notdir $(HDR)))
XREF		+= $(patsubst %, %.xref, $(SRC))

TARGET		:= $(top_builddir)/lib/libPrague.so
MANUAL		:= $(docdir)/html

vpath %.hh  $(hdir):$(hdir)/Sys:$(hdir)/IPC:$(hdir)/Filter:$(hdir)/Network
vpath %.cc  $(srcdir)/Sys:$(srcdir)/IPC:$(srcdir)/Filter:$(srcdir)/Network

.FORCE:

.PHONY: all doc install install-doc clean distclean maintainer-clean dist

all:	$(TARGET)

$(TARGET):	$(OBJ)
	@echo linking $(@F)
	$(CXX) $(LDFLAGS) -o $@ $(OBJ) $(LIBS) -lz

depend: $(DEP)

xref:	$(docdir)/sxr/Prague.xref $(docdir)/sxr/Prague.syn

doc:	$(MANUAL)

$(docdir)/sxr/Prague.xref:	$(XREF)
	@echo linking xref files together
	@mkdir -p $(docdir)/sxr
	@compile-xref -o $@ $^

$(docdir)/sxr/Prague.syn:	$(SSYN) $(HSYN)
	@echo linking synopsis files together
	@mkdir -p $(docdir)/sxr
	@$(SYNOPSIS) -o $@ $^

$(MANUAL):	$(HSYN)
	@echo formatting $(@F)
	@$(SYNOPSIS) -c ../config/synopsis.py -Wc,formatter=HTML -o $@ $(HSYN)
	touch $@

install:	all
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(libdir)
	$(SHTOOL) install -C -m 755 $(TARGET) $(DESTDIR)$(libdir)/$(notdir $(TARGET))
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(includedir)/Prague
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(includedir)/Prague/Sys
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(includedir)/Prague/IPC
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(includedir)/Prague/Filter
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(includedir)/Prague/Network
	$(SHTOOL) install -C -m 644 ../include/Prague/acconfig.hh $(DESTDIR)$(includedir)/Prague
	$(SHTOOL) install -C -m 644 ../include/Prague/config.hh $(DESTDIR)$(includedir)/Prague
	for header in $(SysH); do \
	  $(SHTOOL) install -C -m 644 $(hdir)/Sys/$$header $(DESTDIR)$(includedir)/Prague/Sys; \
	done
	for header in $(IPCH); do \
	  $(SHTOOL) install -C -m 644 $(hdir)/IPC/$$header $(DESTDIR)$(includedir)/Prague/IPC; \
	done
	for header in $(FilterH); do \
	  $(SHTOOL) install -C -m 644 $(hdir)/Filter/$$header $(DESTDIR)$(includedir)/Prague/Filter; \
	done
	for header in $(NetworkH); do \
	  $(SHTOOL) install -C -m 644 $(hdir)/Network/$$header $(DESTDIR)$(includedir)/Prague/Network; \
	done
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(bindir)
	$(SHTOOL) install -C -m 755 ../config/Prague-config $(DESTDIR)$(bindir)

install-doc: doc
	$(SHTOOL) mkdir -f -p -m 755 $(DESTDIR)$(datadir)/doc/Prague
	cp -r ../share/doc/Prague/html $(DESTDIR)$(datadir)/doc/Prague

uninstall:
	rm -fr $(DESTDIR)$(datadir)/Babylon/doc
	rm -f $(DESTDIR)$(bindir)/Prague-config
	rm -rf $(DESTDIR)$(includedir)/Prague
	rm -f $(DESTDIR)$(libdir)/libPrague.so

clean:	
	rm -f $(TARGET)
	rm -f $(OBJ) $(DEP) $(SYN) $(XREF)
#	cd Examples; $(MAKE) clean;

distclean:	clean
	rm -f Makefile ../include/Prague/acconfig.hh \
          ../bin/Prague-config
#	cd Examples; $(MAKE) distclean

maintainer-clean: distclean

%.d:	%.cc %.hh
	@echo generating dependencies for $(<F)
	$(SHELL) -ec '$(CXX) $(DEPFLAGS) $(CPPFLAGS) $< | sed "s/$*\\.o[ :]*/$*\\.d $*\\.o : /g" > $@'

%.o:	%.cc
	@echo compiling $(@F)
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(SOFLAGS) -c $< -o $@

DataTypeManager.o:	DataTypeManager.cc
	@echo compiling $(@F)
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(SOFLAGS) -ftemplate-depth-23 -c $< -o $@

%.hh.syn %.hh.xref:	%.hh
	@echo parsing $(^F)
	@$(SYNOPSIS) -c ../config/synopsis.py -Wc,parser=Fresco,linker=Fresco -Wp,-x,$(<F).xref -o $*.hh.syn $?

%.cc.syn %.cc.xref:	%.cc
	@echo parsing $(^F)
	@$(SYNOPSIS) -c ../config/synopsis.py -Wc,parser=Fresco,linker=Fresco -Wp,-x,$(<F).xref -o $*.cc.syn $?

ifneq (,$(findstring depend, $(MAKECMDGOALS)))
$(DEP): %.d:	.FORCE
endif

ifeq (,$(filter $(MAKECMDGOALS), depend doc install-doc clean distclean maintainer-clean))
-include $(DEP)
endif
