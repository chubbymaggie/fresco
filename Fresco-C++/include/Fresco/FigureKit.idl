/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _FigureKit_idl
#define _FigureKit_idl

#include "Types.idl"
#include "Style.idl"
#include "Cloneable.idl"

interface BoundedValue;
interface Graphic;

// This kit produces graphics with appropriate logic for rendering
// abstract shapes.  you input paths, patches, styles (which define
// attributes like color, line thickness, pattern, etc) and you get
// back an object which will draw the specified type of object when it
// is traversed. Figures have no particular logic for sizing
// themselves -- they always resize to fit their allocation. The Path
// and Patch arguments given to poly, curve, and surface figures will
// be scaled within the allocation so that the allocation ranges over
// the interval [0,1]x[0,1] -- in other words you should always
// specify co-ordinates on the path/path in the unit square..

interface FigureKit : Cloneable {

// these ctors allow you to provide an overriding style specifier for
// each object. any aspects it cannot determine from its specifier
// (if you leave them blank, or just provide a null value) it will
// attempt to inherit from its environment, via some sort of (possibly
// persistent) style engine which analyzes the scene graph

  Graphic rect(in Style::Spec sty);
  Graphic ellipse(in Style::Spec sty);
  Graphic path(in Style::Spec sty, in Path p);
  Graphic patch(in Style::Spec sty, in Patch p);
};


#endif
