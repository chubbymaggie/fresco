#ifndef _Naming_idl
#define _Naming_idl

//
// $Id$
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//

// This is a formal specification of COS naming interfaces.
// I'm not sure how closely omni follows it.

module CosNaming {


typedef string Istring;

struct NameComponent {
  Istring id;
  Istring kind;
};

typedef sequence <NameComponent> Name;

enum BindingType {nobject, ncontext};

struct Binding {
  Name binding_name;
  BindingType binding_type;
};

typedef sequence <Binding> BindingList;
interface BindingIterator;

interface NamingContext {
  enum NotFoundReason {missing_node, not_context, not_object};

  exception NotFound {
    NotFoundReason why;
    Name rest_of_name;
  };

  exception CannotProceed {
    NamingContext cxt;
    Name rest_of_name;
  };

  exception InvalidName{};
  exception AlreadyBound{};
  exception NotEmpty{};

  void bind(in Name n, in Object obj)
    raises(NotFound, CannotProceed, InvalidName, AlreadyBound);

  void rebind(in Name n, in Object obj)
    raises(NotFound, CannotProceed, InvalidName);

  void bind_context(in Name n, in NamingContext nc)
    raises(NotFound, CannotProceed, InvalidName, AlreadyBound);

  void rebind_context(in Name n, in NamingContext nc)
    raises(NotFound, CannotProceed, InvalidName);

  Object resolve (in Name n)
    raises(NotFound, CannotProceed, InvalidName);

  void unbind(in Name n)
    raises(NotFound, CannotProceed, InvalidName);

  NamingContext new_context();

  NamingContext bind_new_context(in Name n)
    raises(NotFound, AlreadyBound, CannotProceed, InvalidName);

  void destroy( )
    raises(NotEmpty);

  void list (in unsigned long how_many,
	     out BindingList bl, out BindingIterator bi);
};

interface BindingIterator {
  boolean next_one(out Binding b);

  boolean next_n(in unsigned long how_many,
		 out BindingList bl);

  void destroy();
};
};

#endif
