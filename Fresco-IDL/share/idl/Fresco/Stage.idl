/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Layout_Stage_idl
#define _Layout_Stage_idl

#include <Warsaw/Graphic.idl>

module Layout
{
  interface StageHandle;
  
  //. A stage allows its children to be placed at any position and
  //. layering.
  interface Stage : Warsaw::Graphic
    {
      //. An index refers to the position of a child graphic in the stack (the 'layer')
      //. 0 refers to the top-most graphic
      typedef long Index;
      //. Return the bounding box of the stage
      Warsaw::Region bbox();
      //. Return the total number of layers
      long layers();
      //. Return a handle for the object forming layer l. Return
      //. nil if the layer is out of range
      StageHandle layer(in Index l);
      
      //. begin and end behave like a recursive lock, in that only after
      //. the last end is called pending need_redraw and need_resize
      //. requests will be executed. In particular, a typical implementation may
      //. merge all need_redraw requests into one with the new damaged region
      //. being the union of the individually requested regions
      void begin();
      //. See begin()
      void end();
      //. Insert a graphic into the stage at a given layer with the given position
      //. and the given size. All higher layers are increased ('pushed back').
      StageHandle insert(in Warsaw::Graphic g, in Warsaw::Vertex position, in Warsaw::Vertex size, in Index layer);
    };
  
  interface StageHandle
    {
      //. Return the stage this handle refers to
      Stage           parent();
      //. Return the graphic this handle refers to
      Warsaw::Graphic child();
      //. Remove the graphic this handle refers to. As a sideeffect,
      //. the handle itself is destroyed
      void            remove();
      //. Return the graphic's position
      attribute Warsaw::Vertex position;
      //. Return the graphic's size
      attribute Warsaw::Vertex size;
      //. Return the graphic's layer
      attribute Stage::Index layer;
    };
};

#endif
