/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> 
 * Copyright (C) 1999 Graydon Hoare <graydon@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_BoundedValue_idl
#define _Fresco_BoundedValue_idl

#include <Fresco/Subject.idl>
#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

module Fresco
{
  //. A BoundedValue describes a 'value within a range'
  //. such as a Slider.
  //. The value will allways stay contained in the range.
  interface BoundedValue : Subject
    {
      //. The current lower bound of the range.
      attribute Coord lower;
      //. The current upper bound of the range.
      attribute Coord upper;
      //. The current step size.
      attribute Coord step;
      //. The current page size.
      attribute Coord page;
      //. The current value. It will allways be contained in ]lower, upper[.
      attribute Coord value;
      //. Move the value a step forward.
      void forward();
      //. Move the value a step backward.
      void backward();
      //. Move the value a page forward.
      void fastforward();
      //. Move the value a page backward.
      void fastbackward();
      //. Move the value to the beginning of the range (value=lower).
      void begin();
      //. Move the value to the end of the range (value=upper).
      void end();
      //. Move the value for the given value. A positive value
      //. of d moves the value forward, a negative value of d
      //. moves it backward.
      void adjust(in Coord d);
    };
};

#endif
