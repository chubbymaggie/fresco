/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
 * Copyright (C) 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Server_idl
#define _Server_idl

#include <Kit.idl>

interface ClientContext;

exception SecurityException {};
exception SingletonFailureException {};
exception CreationFailureException {};

interface ServerContext
//. the ServerContext is an object you pick up from the berlin
//. server's root ContextManager, and which you use to create all
//. generic interfaces (kits, plugins, etc).
{
  Kit resolve(in string type, in Kit::PropertySeq attr)
    raises (SecurityException, CreationFailureException);
  //. this is the entry point to generic object creation on a server.

  void setSingleton(in string name, in Object singleton) 
    raises (SecurityException, SingletonFailureException);
  //. access to singletons (like the fontManager) this way

  void delSingleton(in string name)
    raises (SecurityException, SingletonFailureException);

  Object getSingleton(in string name) 
    raises (SecurityException, SingletonFailureException);
};

interface Server
//. this is the "super-context" -- the entry point for all new contexts.
{
  ServerContext newServerContext(in ClientContext C) raises (SecurityException);
// #ifdef __OMNIIDL__
//   boolean _supports(in string t);
// #else
//   boolean supports(in string t);
// #endif
};

#endif
