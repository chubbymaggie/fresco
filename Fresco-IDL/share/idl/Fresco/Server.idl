/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
 * Copyright (C) 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Warsaw_Server_idl
#define _Warsaw_Server_idl

#include <Warsaw/Types.idl>
#include <Warsaw/Kit.idl>

module Warsaw
{
  interface ClientContext;

  //. The ServerContext is an object you pick up from the berlin
  //. server's root ContextManager, and which you use to create all
  //. generic interfaces (kits, plugins, etc).
  interface ServerContext
    {
      //. The ClientContext that is associated with this
      readonly attribute ClientContext client;
      //. This is the entry point to generic object creation on a server.
      Kit resolve(in string type, in Kit::PropertySeq attr)
	raises (SecurityException, CreationFailureException);
      
      //. access to singletons (like the fontManager) this way
      //. FIXME: What exactly does it do? Does it add a singleton to
      //.        This ServerContext only? Does it add it to all of them?
      void set_singleton(in string name, in Object singleton) 
	raises (SecurityException, SingletonFailureException);
      //. FIXME: see set_singleton()
      void remove_singleton(in string name)
	raises (SecurityException, SingletonFailureException);
      //. Gets the Singleton that is associated to the given name.
      Object get_singleton(in string name) 
	raises (SecurityException, SingletonFailureException);
    };

  //. This is the interface of the only Object that can be looked up in
  //. the CORBA nameservice: This is what a client sees.
  interface Server
    {
      //. create_server_context() is the method used by a Berlin client to
      //. connect to the Berlin server.
      //. The server examines the given ClientContext and if it has
      //. sufficient permissions the server will return a ServerContext which
      //. can then be used to access the server's resources.
      ServerContext create_server_context(in ClientContext C) raises (SecurityException);
    };
};

#endif
