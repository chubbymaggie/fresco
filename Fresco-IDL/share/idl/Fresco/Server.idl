/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
 * Copyright (C) 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Warsaw_Server_idl
#define _Warsaw_Server_idl

#include <Warsaw/Types.idl>
#include <Warsaw/Kit.idl>

module Warsaw
{
  interface ClientContext;

  //. Interface of the per-client context object. Each client receives a
  //. reference to a ServerContext upon authentication by the Server object's
  //. create_server_context operation. Through the ServerContext the client can
  //. resolve singletons and Kits. 
  //. @see Server
  //. @see Kit
  interface ServerContext
    {
      //. The ClientContext that is associated with this ServerContext
      readonly attribute ClientContext client;

      //. The entry point to generic object creation on a server. The
      //. ServerContext will use the type string and the property sequence to
      //. locate a suitable Kit object.
      //. @param type The type of Kit to resolve
      //. @param attr Allows specific Kit implementations to be selected in a
      //. generic manner
      //. @return The resolved kit
      Kit resolve(in string type, in Kit::PropertySeq attr)
	raises (SecurityException, CreationFailureException);
      
      //. Add the given Object to the serverwide map of available singletons.
      //. It can get accessed later by the given name.
      //. SecurityException is raised if the client is not permitted to
      //. install Singletons.
      //. SingletonFailureException is raised whenever you try to add a
      //. singleton with a name that allready exists.
      void set_singleton(in string name, in Object singleton) 
	raises (SecurityException, SingletonFailureException);

      //. Remove the singleton with the given name from the serverwide map of
      //. available singletons.
      //. SecurityException is raised if the client is not permitted to
      //. remove the given singleton.
      //. SingletonFailureException is raised whenever you try to remove a
      //. a name that does not exist in the map.
      void remove_singleton(in string name)
	raises (SecurityException, SingletonFailureException);

      //. Get the Singleton-Object that is associated to the given name.
      //. SecurityException is raised if the client is not permitted to
      //. access the Singleton.
      //. SingletonFailureException is raised whenever you try to request a
      //. singleton with a name that does not exist in the map.
      Object get_singleton(in string name) 
	raises (SecurityException, SingletonFailureException);
    };
  
  //. Interface of the public factory object used to contact the Berlin
  //. Server. A Berlin Server will create an object with this interface and
  //. register it with a CORBA NameService, where it can be located by
  //. clients. It only has one operation, which is to create a new
  //. ServerContext to handle communications with a given client.
  //. @see ServerContext
  //. @see ClientContext
  interface Server
    {
      //. Create a new server context. This is the first operation called by a
      //. new client. The given ClientContext is used to determine if the 
      //. client has sufficient permissions to connect, and is also the object
      //. that the server uses to ensure the liveness of the client.
      //. @param C the ClientContext created in the client
      //. @return A ServerContext that the client can use for further
      //. communication with the Berlin server.
      ServerContext create_server_context(in ClientContext C) raises (SecurityException);
    };
};

#endif
