/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999, 2000 Niklas Elmqvist <elm@3dwm.org>
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * Copyright (C) 1999 Graydon Hoare <graydon@pobox.com> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _DrawingKit3D_idl
#define _DrawingKit3D_idl

#include <Warsaw/DrawingKit.idl>

module Warsaw
{
  interface Raster;
  //. Sequence of rasters (for multitexturing)
  typedef sequence<Raster> Rasters;

  struct MaterialAttr
  {
    Color ambient;
    Color diffuse;
    Color specular;
    Color emissive;
    float shininess;
  };

  //. This Kit is more elaborate than the DrawingKit it derives from. It
  //. supports support for drawing 3D primitives, as well as other widgets
  //. usually found in 3D renderers, such as light, material, etc.
  interface DrawingKit3D : DrawingKit
  {
    enum TextureMode { TextureOff, Texture1D, Texture2D, Texture3D};
    enum FoggingMode { FogOff, FogLinear, FogExponential};
    attribute MaterialAttr material;
    attribute Rasters textures;
    attribute TextureMode tex_mode;
    void directional_light(in Color c, in float i, in Vertex d);
    void point_light(in Color c, in float i, in Vertex l);
    void spot_light(in Color c, in float i, in Vertex l, in Vertex d, in float r, in float a);
    attribute FoggingMode fog_mode;
    
    void draw_mesh(in Mesh m);    
  };

};
  

#endif
