/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Portions Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> 
 * Portions Copyright (C) 1999 Graydon Hoare <graydon@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_Types_idl
#define _Fresco_Types_idl

#pragma prefix "fresco.org"

module Fresco
{
  //. Tags are used to uniquely identify objects and links between objects.
  //. They are garanteed to be unique to each scope by each function
  //. generationg Tags.
  typedef unsigned long Tag;
  //. User interface objects specify positions and sizes in terms
  //. of coordinates.  The Coord type represents a position or distance
  //. in units of 1/10 mm.  Coord might better be defined as an interface
  //. from the perspective of abstraction, but for practical reasons it is
  //. defined as a typedef.  For applications with simple graphics needs,
  //. the use of floating point coordinates is typically
  //. not a problem.  Applications with more sophisticated text
  //. or graphics usually need to manipulate floating point
  //. coordinates anyway.
  typedef double Coord;
  //. The PixelCoord type represents a position or distance in
  //. units of screen pixels.  PixelCoord values are inherently
  //. resolution-dependent and generally should be avoided.
  //. However, some user interfaces need to guarantee that they
  //. produce output that is precisely balanced in terms of pixels.
  //. Coord values are resolution-independent, but one cannot rely
  //. on precise output at low resolutions.  Coordinates are normally
  //. rounded-off to guarantee that objects that abut in coordinates
  //. will abut on the screen.
  //.
  //. This approach introduces the possibility that the same Coord
  //. value might be converted to two different PixelCoord values.
  //. To avoid such an occurrence, an application object should
  //. convert the coordinate value to a PixelCoord and then back
  //. to a Coord before using it.
  typedef long PixelCoord;
  //. Axis is a type for specifying a dimension of cartesian coordinates.
  //. Many user interface operations, especially involving layout,
  //. can be parameterized by dimension.
  enum Axis { xaxis, yaxis, zaxis };
  
  //. A vertex is a 3-dimensional point.  An implementation
  //. may only implement 2d operations and therefore will ignore
  //. the z-field of vertices.
  struct Vertex 
  {
    Coord x, y, z;
  };
  //. Vertices are a sequence of 3-dimensional points.
  typedef sequence<Vertex> Vertices;
  //. A Path contains a sequence of points, as well as a hint
  //. for the renderer concerning its shape that helps to determine
  //. how much preprocessing needs to be done
  enum PathShape { convex, non_convex, complex };
  struct Path
  {
    Vertices nodes;
    PathShape shape;
  };

  //. An OriginatedDelta is used (e.g. by Dragger) to specify an
  //. origin and a delta (i.e. displacement) relative to that origin.
  struct OriginatedDelta
  {
    Vertex origin;
    Vertex delta;
  };
  
  //. Texture coordinates (used by all texture mapping modes)
  struct TexCoord
  {
    Coord u, v, w;
  };
  typedef sequence<TexCoord> TexCoords;

  //. An alignment is a floating point value that represents
  //. a relative position.  Alignments are typically between
  //. zero and one inclusive, with zero indicating the position
  //. is aligned with the lower point and one indicating
  //. alignment with the higher point.  For example, an alignment
  //. of zero along the x axis indicates that the position
  //. is left-aligned, a value of one means the position is
  //. right-aligned.
  typedef double Alignment;

  //. This is a RGBA-Color. All values may be between 0.0 and 1.0.
  //. red = 1.0, green = 1.0, blue = 1.0 is white. A alpha value of 0.0
  //. makes an object invisible.
  struct Color
  {
    double red, green, blue;
    double alpha;
  };

  //. Triangles are used by Meshes to draw 3D surfaces.
  //. They refer to indexes within a Vertex sequence
  struct Triangle
  {
    long a, b, c;
  };
  typedef sequence<Triangle> TriangleSeq;

  //. FIXME: What exactly is this? Should this go to Types3D?
  struct Mesh
  {
    Vertices nodes;
    TriangleSeq triangles;    
    Vertices normals;
  };

  //. This is a character in the unicode range U+0000 - U+FFFF. It is a
  //. coded representation of a "unit" of textual information. it is not
  //. a picture on a screen, nor a particular semantic value. it is only
  //. meaningful in the context of an application, a locale, and a human
  //. reader of a particular language.
  typedef unsigned short Unichar;
  
  //. This is a sequence of Unichars. they have a logical memory ordering
  //. which corresponds to the sequence in which they are entered into a
  //. computer, over time, by a human or other process. Even if they are
  //. in a right-to-left writing system, they always go in this order
  //. when considered as characters. Only when transformed to glyphs do
  //. they get special layout properties like screen direction.
  typedef sequence<Unichar> Unistring;
  
  //. This is a Name-Value Pair.
  struct NVPair 
  {
    Unistring name;
    any val;
  };

  //. This exception is thrown whenever the user attempts to invoke
  //. an operation that he is not authorized for
  exception SecurityException {};
  //. This exception is  thrown whenever something goes wrong with a Singleton.
  exception SingletonFailureException {};
  //. this exception is thrown whenever an object couldn't be created
  exception CreationFailureException {};
};

#endif
