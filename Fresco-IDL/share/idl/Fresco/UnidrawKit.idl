/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 2000 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Fresco_UnidrawKit_idl
#define _Fresco_UnidrawKit_idl

#include <Fresco/Controller.idl>
#include <Fresco/Subject.idl>
#include <Fresco/Command.idl>
#include <Fresco/Kit.idl>

#pragma prefix "fresco.org"

//. The UnidrawKit contains functions that allow for an easy
//. implementation of vector based drawing applications.
//. FIXME: I won't document this right now as this is subject to change
//.        without notice and not really used anywhere except for
//.        Stefan's application. Stefan, please tell me when this is
//.        intended for public use...
module Unidraw
{
  interface View;
  interface Model : Fresco::RefCountBase
    {
      View create_view();
    };
  interface View : Fresco::Controller
    {
      // add attributes to indicate selection, highlighting, etc.
      readonly attribute Model subject;
    };
  interface Command
    {
      void execute();
      // memento protocol...
      void store(in Model m, in any a);
      any recall(in Model m);
      void destroy();
    };
//   interface Manipulator
//     {
//       boolean grasp(in Fresco::PickTraversal t, in Fresco::Input::Event e);
//       boolean manipulate(in Fresco::PickTraversal t, in Fresco::Input::Event e);
//       void effect(in Fresco::PickTraversal t, in Fresco::Input::Event e);
//       void destroy();
//     };
  interface Tool : Fresco::RefCountBase
    {
      boolean grasp(in Fresco::Controller c, in Fresco::PickTraversal t, in Fresco::Input::Event e);
      boolean manipulate(in Fresco::PickTraversal t, in Fresco::Input::Event e);
      Command effect(in Fresco::PickTraversal t, in Fresco::Input::Event e);
//       Manipulator create_manipulator(in Fresco::Controller c, in Fresco::PickTraversal t, in Fresco::Input::Event e);
//       Command interpret_manipulator(in Manipulator m);
    };
  interface Editor : Fresco::RefCountBase
    {
      void append_tool(in Tool t, in Fresco::Graphic g);
      attribute Tool current_tool;
      Fresco::Controller create_viewer(in Model m, in Fresco::Coord width, in Fresco::Coord height);
      Fresco::Controller toolbar();
    };
  interface UnidrawKit : Fresco::Kit
    {
      Tool   select_tool();
      Editor create_editor();
      View   create_view(in Fresco::Graphic g, in Model m);
    };
};

#endif
