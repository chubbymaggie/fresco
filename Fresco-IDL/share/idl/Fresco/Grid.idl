/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Grid_idl
#define _Grid_idl

#include <Warsaw/Graphic.idl>

interface Traversal;

//. A grid tiles its children into columns and rows and aligns
//. the children within each column and row.
interface Grid : Graphic
{
  //. The Index structure identifies a single cell in a grid. A
  //. nil index is defined to contain the values col = -1, row = -1.
  struct Index
  {
    long col;
    long row;
  };
  typedef sequence<Index> IndexSeq;
  //. The Range structure defines a sub-range of the glyphs in a grid.
  struct Range
  {
    Index lower;
    Index upper;
  };
  //. Replace the glyph at the row and column position.  It is ok
  //. to replace a glyph with nil, or to replace a nil with a glyph.
  void replace(in Graphic g, in Grid::Index i);
  //. Find the row and column position of the bottom-left most cell
  //. that intersects the traversal painters visible region bounds.
  //. If no cell is intersected find the closest edge cell.
  Grid::Index find(in Traversal t);
  //. Return the allocation of a cell.
  void allocateCell(in Region given, in Grid::Index i, in Region a);
  //. These operations use a sub-range of the glyphs in the grid.
  void requestRange(out Graphic::Requisition r, in Grid::Range a);
  void traverseRange(in Traversal t, in Grid::Range a);
  Grid::Index findRange(in Traversal t, in Grid::Range a);
  //. Return the lower-left corner of the range within the grid.
  //. Note that a grid's offset expects the Allocation given to
  //. childAllocate to be adjusted by the negated rangePosition. 
  void rangePosition(in Region given, in Grid::Range a, out Vertex pos);
  Grid::Index upper();
};

#endif /* _Grid_idl */
