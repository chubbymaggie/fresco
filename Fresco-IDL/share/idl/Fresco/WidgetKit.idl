/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Graydon Hoare <graydon@fresco.org> 
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_WidgetKit_idl
#define _Fresco_WidgetKit_idl

#include <Fresco/Types.idl>
#include <Fresco/Telltale.idl>
#include <Fresco/Kit.idl>
#include <Fresco/Widget.idl>

#pragma prefix "fresco.org"

module Fresco
{
  interface TelltaleConstraint;
  interface BoundedValue;
  interface BoundedRange;
  interface TextBuffer;
  interface StreamBuffer;
  interface Graphic;
  interface View;
  interface Controller;
  interface Command;
  interface Trigger;
};

module Widget
{
  interface Choice;
};

module Fresco
{
  //. A WidgetKit is a layer on top of the Graphic interface and
  //. CommandKit. It uses the basic commands from the CommandKit and
  //. adds nice(r) graphics to the objects from there.
  //. The WidgetKit is responsible for creating subjects, and binding
  //. views and controller strategies to the subjects. These amalgams
  //. are usually called "widgets" -- they react to events in a
  //. particular way by modifying the subjects they're bound to.
  interface WidgetKit : Kit
    {
      //. Return a Button labeled with the given Graphic g which executes
      //. Command c when clicked (actually it reacts to button releases).
      Trigger          button(in Graphic g, in Command c);
      //. This is a simple controller encoding an on/off state. It gets
      //. toggled between these states by clicking on it.
      Controller       toggle(in Graphic g);
      //. Create a gauge widget. A gauge presents a BoundedValue v.
      Graphic          gauge(in BoundedValue v);
      //. Create a slider widget that manipulates the given BoundedValue.
      Controller       slider(in BoundedValue v, in Axis a);
      //. A panner is a two-dimensional slider: It manipulates the two given
      //. bounded ranges x and y at once.
      Controller       panner(in BoundedRange x, in BoundedRange y);
      //. Create a scrollbar, manipulating a BoundedRange.
      Controller       scrollbar(in BoundedRange x, in Axis a);
      //. This is a radio button (group). You need to append_graphic() your
      //. selections: The user will be able to select any one of the appended
      //. Graphics. Exactly one of these graphics can be selected at any
      //. given time.
      //. 
      //. You will need to attach() an observer to the returned graphic to
      //. figure out the state.
      //. FIXME: This is always a vbox. We need something like axis for the
      //.        scrollbar (and others) don't we? Or can we pass the graphic
      //.        used for layout? -- tobias
      Widget::Choice   toggle_choice();
      //. This is a checkbox (group). You need to append_graphic() your
      //. selections: The user will be able to select any one of the appended
      //. Graphics. More then one of these graphics can be selected at any
      //. given time.
      //. 
      //. You will need to attach() an observer to the returned graphic to
      //. figure out the state.
      //. FIXME: see toggle_choice -- tobias
      Widget::Choice   checkbox_choice();
      //. This implements a toolbar. You will need to append_graphic()
      //. your possible selections.
      //. 
      //. You will need to attach() an observer to the returned graphic to
      //. figure out the state.
      //. FIXME: see toggle_choice -- tobias
      Widget::Choice   toolbar();
      //. This returns a termial widget.
      //. FIXME: Be more verbose. How does all the terminal stuff interconnect?
      Controller       terminal();
//       Widget::Splitter splitter(in Graphic g1, in Graphic g2, in Axis a);
      //. Makes the given Graphic g scrollable.
      //  FIXME: Same here (see toggle_choice()). It could just use
      //         the WidgetKit for the Scrollbars and be done with it.
      //         -- tobias
      Controller       scrollable(in Graphic g);
    };
};

#endif

