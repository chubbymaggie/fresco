/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Warsaw_PrimitiveKit_idl
#define _Warsaw_PrimitiveKit_idl

#include <Warsaw/Types.idl>
#include <Warsaw/Kit.idl>
#include <Warsaw/Primitive.idl>

module Warsaw
{
  //. This kit produces graphics with appropriate logic for rendering
  //. abstract 3D shapes.  you input meshes, patches, styles (which define
  //. attributes like color, line thickness, pattern, etc) and you get
  //. back an object which will draw the specified type of object when it
  //. is traversed.
  interface PrimitiveKit : Kit
    {
      //. Return a graphic that centers its body by transformation.
      //. This kind of graphic should be put around a collection
      //. of primitives that are inside a layout object such as a box.
      Graphic root(in Graphic g);
      Primitive::Geometry geometry(in Mesh m);
      //. apply a fixed transformation to the body graphic
      Graphic transformer(in Graphic g);
    };
};

#endif
