/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_Traversal_idl
#define _Fresco_Traversal_idl

#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

module Fresco
{
  interface Region;
  interface Graphic;
  interface Transform;
  
  //. The Traversal interface defines the mechanism for
  //. visiting a collection of graphics. A Traversal is passed
  //. to a graphic's traverse operation and maintains common
  //. information as well as the stack of information associated
  //. with each level of the traversal.
  interface Traversal
    {
      //. The order in which children are accessed.
      enum order {up,    //.< Begin with the first child, end with the last.
		  down}; //.< Begin with the last child, end with the first.
      //. Return the current allocation region for the current graphic
      //. in the traversal
      Region current_allocation();
      //. Return the cumulative transformation matrix for
      //. the current graphic in the traversal.
      Transform current_transformation();
      //. Return the graphic currently visited.
      Graphic current_graphic();
      //. Set the bounds and the origin of the current allocation.
      //. This functions returns true if everything went well and false
      //. otherwise.
      //. FIXME: Is this the right way to do it? We never use return values
      //.        for such things... -- tobias
      boolean bounds(out Vertex lower, out Vertex upper, out Vertex origin);
      //. Calculate the current region and check whether that intersects with
      //. something relevant to the Traversal used (for example a clipping
      //. region). The actual test depends on the Traversal used.
      boolean intersects_allocation();
      //. Test whether the given Region intersects with something relevant to
      //. the Traversal in use (for example a clipping region). The actual
      //. test depends on the Traversal used.
      boolean intersects_region(in Region r);
      //. Continue traversing down to the given child graphic.
      //. FIXME: What are e, r and t used for?
      void traverse_child (in Graphic g, in Tag e, in Region r, in Transform t);
      //. Call the traversal-specific operation on the current graphic.
      //. This operation should be called on a leaf graphic
      //. (or a composite that wants to do more than traverse
      //. its children) when the traversal operation is other.
      void visit(in Graphic g);
      //. Return the direction of this Traversal.
      order direction();
      //. Return true is everything went OK so far. This is used to 
      //. break out of loops and simular things.
      boolean ok();
      //. Recalculate the accumulated values.
      void update();
    };
};

#endif
