/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 2000 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_Kit_idl
#define _Fresco_Kit_idl

#include <Fresco/RefCountBase.idl>

#pragma prefix "fresco.org"

module Fresco
{
  interface ServerContext;

  //. The Kit interface is the base type for most of the objects
  //. you will allocate in a berlin server.
  interface Kit : RefCountBase
    {
      //. A property is a NameValue Pair of strings.
      // FIXME: Should we use NVPair from Types.idl here?
      //        Propably overkill... -- tobias?
      struct Property
      {
	string name;
	string value;
      };
      typedef sequence<Property> PropertySeq;
      
      //. Query for properties.
      readonly attribute PropertySeq properties;
      //. Returns true if this Kit supports all properties in the given
      //. PropertySeq p (and false otherwide).
      boolean _supports(in PropertySeq p);
      //. Initializer method which allows a kit to hook up resources it
      //. might need from the same ServerContext (for example: other Kits
      //. this use will use).
      void bind(in ServerContext sc);
    };
};

#endif
