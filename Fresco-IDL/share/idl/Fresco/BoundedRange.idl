/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_BoundedRange_idl
#define _Fresco_BoundedRange_idl

#include <Fresco/Subject.idl>
#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

module Fresco
{
  //. A BoundedRange describes a 'range within a range'
  //. such as a Viewport (a 'window') manipulated by a
  //. scrollbar. The 'internal' range will allways stay
  //. completely contained in the 'external' range.
  interface BoundedRange : Subject
    {
      //. Stores the state of the BoundedRange.
      struct Settings
      {
	  Coord lower; //.< The lower bound of the 'external' range.
	  Coord upper; //.< The upper bound of the 'external' range.
	  Coord lvalue; //.< The lower bound of the 'internal' range.
	  Coord uvalue; //.< The upper bound of the 'internal' range.
      };
      //. The current state of this BoundedRange.
      attribute Settings state;
      //. The current lower bound of the 'external' range.
      attribute Coord lower;
      //. The current upper bound of the 'external' range.
      attribute Coord upper;
      //. The current step size.
      attribute Coord step;
      //. The current page size.
      attribute Coord page;
      //. The current lower bound of the 'internal' range. This is allways
      //. in ]lower, uvalue].
      attribute Coord lvalue;
      //. The current upper bound of the 'internal' range. This is allways
      //. in [lvalue, upper[.
      attribute Coord uvalue;

      //. Move the 'internal' range a step forward.
      void forward();
      //. Move the 'internal' range a step backward.
      void backward();
      //. Move the 'internal' range a page forward.
      void fastforward();
      //. Move the 'internal' range a page backward.
      void fastbackward();
      //. Move the 'internal' range to the beginning of the 'external' range
      //. (lvalue = lower). The size of the range (uvalue - lvalue) will
      //. stay unchanged.
      void begin();
      //. Move the 'internal' range to the end of the 'external' range
      //. (uvalue = upper). The size of the range (uvalue - lvalue) will
      //. stay unchanged.
      void end();
      //. Move the 'internal' range for the given value. A positive value
      //. of d moves the 'internal' range forward, a negative value of d
      //. moves it backward.
      void adjust(in Coord d);
    };
};

#endif
