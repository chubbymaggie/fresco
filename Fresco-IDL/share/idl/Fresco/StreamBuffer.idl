/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Warsaw_StreamBuffer_idl
#define _Warsaw_StreamBuffer_idl

#include <Warsaw/Subject.idl>
#include <Warsaw/Types.idl>

module Warsaw
{
  //. The StreamBuffer is used to interact with Streams. As the
  //. name implies the Stream is buffered.
  //. Warning: Only add one observer to this Object: Only the first can read
  //. the StreamBuffer, all others will only find it empty!
  interface StreamBuffer : Subject
    {
      //. The Data that gets passed is a sequence of octets.
      //. So it won't be modified by the ORB. You have to make
      //. sure that it is in a format that the reciever expects
      //. yourself!
      typedef sequence<octet> Data;

      //. Returns the length of the StreamBuffer. It is the
      //. number of octets that can be written to the StreamBuffer before
      //. it overflows.
      readonly attribute long size;
      //. Returns the number of octets that were written to the StreamBuffer
      //. and not read back out yet.
      //. FIXME: This function name is very confusing! Or did I get it all
      //.        wrong?
      readonly attribute long available;
      //. Returns all octets in the buffer and empties it afterwards.
      //. A maximum of size() octets get returned.
      Data read();
      //. Appends the given Data to this StreamBuffer.
      //. All observers get notified if the Buffer overflows. No Data is
      //. lost, even in case of an StremBuffer overflow.
      void write(in Data d);
      //. Asks the Observers to read data from this Buffer.
      void flush();
    };
};

#endif
