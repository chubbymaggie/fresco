/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * Copyright (C) 1999 Graydon Hoare <graydon@pobox.com> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _DrawingKit_idl
#define _DrawingKit_idl

#include <Warsaw/Kit.idl>
#include <Warsaw/Graphic.idl>

interface Transform;
interface Region;
interface Raster;

interface DrawingKit : Kit
{
  //.all values are in 1/64th of a pixel
  struct FontMetrics
  {
    long ascender;      /* ascender in 26.6 frac. pixels          */
    long descender;     /* descender in 26.6 frac. pixels         */
    long height;        /* text height in 26.6 frac. pixels       */
    long max_advance;   /* max horizontal advance, in 26.6 pixels */
  };
  //.all values are in 1/64th of a pixel
  struct GlyphMetrics
  {
    long width;         /* glyph width  */
    long height;        /* glyph height */
    long horiBearingX;  /* left side bearing in horizontal layouts */
    long horiBearingY;  /* top side bearing in horizontal layouts  */
    long horiAdvance;   /* advance width for horizontal layout     */
    long vertBearingX;  /* left side bearing in vertical layouts */
    long vertBearingY;  /* top side bearing in vertical layouts  */
    long vertAdvance;   /* advance height for vertical layout    */
  };

  enum Endstyle { butt, cap, round};
  enum Fillstyle { outlined, solid, textured, gradient};

  void saveState();
  void restoreState();

  // general drawing state
  attribute Transform transformation;
  attribute Region clipping;
  attribute Color foreground;
  attribute Color lighting;
  attribute Coord pointSize;
  attribute Coord lineWidth;
  attribute Endstyle lineEndstyle;
  attribute Fillstyle surfaceFillstyle;
  attribute Raster texture;

  // font state
  attribute unsigned long fontSize;
  attribute unsigned long fontWeight;
  attribute Unistring fontFamily;
  attribute Unistring fontSubFamily;
  attribute Unistring fontFullName;
  attribute Unistring fontStyle;

  // detailed font state
  readonly attribute FontMetrics fmetrics;
  GlyphMetrics gmetrics(in Unichar uc);
  void fontAttr(in NVPair nvp);
  any getFontAttr(in Unistring name);

  // imperative commands
  Coord resolution(in Axis a);
  void drawPath(in Path p);
//   void drawPatch(in Patch p);
  void drawRect(in Vertex lower, in Vertex upper);
  void drawEllipse(in Vertex lower, in Vertex upper);
  void drawImage(in Raster r);

  void drawText(in Unistring s);
  void allocateText(in Unistring s, inout Graphic::Requisition req);
  void drawChar(in Unichar c);
  void allocateChar(in Unichar c, inout Graphic::Requisition req);

  //. Initialize drawing kit for a rendering pass. Called before
  //. each pass.
  void init();

  //. Finish the rendering pass. Called after each pass.
  void finish();
  
  //. Flush the drawing kit.
  void flush();
};

#endif /* _DrawingKit_idl */
