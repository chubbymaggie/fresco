/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Fresco_Figure_idl
#define _Fresco_Figure_idl

#pragma prefix "fresco.org"

#include <Fresco/Graphic.idl>

#pragma prefix "fresco.org"

//. These interfaces define simple 2-dimensional objects (so called
//. figures) that can get put into the scenegraph.
module Figure
{
//   typedef Fresco::Path Vertices;
    //. Mode is used to define how Figures get drawn.
    typedef short Mode;
    const Mode fill = 1; //.< The Figure will get drawn and filled with the
                         //.< current color.
    const Mode outline = 2; //.< The Figure will be drawn outlined.
    
    //. This interface is the base for all other Figures.
    interface FigureBase : Fresco::Graphic
    {
	// //. The Vertices type defines a sequence of vertex structures
	// //. for figures with an arbitrary number of vertices,
	// //. such as polygons and B-splines.
	
	// attribute Style figure_style;
	// attribute Mode figure_mode;
	
	//. The Mode used to draw this Figure.
	attribute Mode type;
	//. The foreground color.
	attribute Fresco::Color foreground;
	//. The background color.
	attribute Fresco::Color background;
	
	//. FIXME: What does this do?
	void resize();
    };
    
    //. A point.
    interface Point : FigureBase
    {
	//. The position of the Point. The z-Coordinate will be ignored.
	attribute Fresco::Vertex pt;
    };
    
    //. A line.
    interface Line : FigureBase
    {
	//. The positions of the endpoints of the Line.
	//. The z-Coordinate will be ignored.
	attribute Fresco::Vertex pt1, pt2;
    };
    
    //. A Rectangle.
    interface Rectangle : FigureBase
    {
	//. The positions of two opposing corners of the Rectangle.
	//. The z-Coordinate will be ignored.
	attribute Fresco::Vertex pt1, pt2;
    };
    
    //. A Circle.
    interface Circle : FigureBase
    {
	//. The center of the Circle.
	//. The z-Coordinate will be ignored.
	attribute Fresco::Vertex center;
	//. The radius of the Circle. 
	attribute Fresco::Coord radius;
    };
    
    //. An Ellipse.
    interface Ellipse : FigureBase
    {
	//. The center of the Ellipse.
	//. The z-Coordinate will be ignored.
	attribute Fresco::Vertex center;
	//. The first radius used to draw the Ellipse.
	attribute Fresco::Coord radius1;
	//. The second radius used to draw the Ellipse.
	//. FIXME: Which one is which?
	attribute Fresco::Coord radius2;
    };
    
    //. A Path, a sequence of lines.
    interface Path : FigureBase
    {
	//. A seqence of points that will be connected by lines (the
	//. first to the second, the second to the third, ...).
	//. The z-Cooordinate will be ignored.
	attribute Fresco::Path handles;
	//. The last point will be connected to the first one if set.
	readonly attribute boolean closed;

	// attribute boolean curved;
    };
};

#endif
