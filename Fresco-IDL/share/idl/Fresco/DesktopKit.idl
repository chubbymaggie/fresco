/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_DesktopKit_idl
#define _Fresco_DesktopKit_idl

#include <Fresco/Types.idl>
#include <Fresco/Kit.idl>

#pragma prefix "fresco.org"

module Fresco
{
  interface Controller;
  interface Window;
  interface Desktop;
  interface Command;
  interface ClientContext;

  //. A DesktopKit defines the interface between client and server.
  //. All DesktopKit generated Graphics are top level objects, they
  //. should be used to wrap client sub graphs into.
  //. In this respect a DesktopKit plays the role of X's window manager 
  //. concept
  //.
  //. One day the DesktopKit should allow to define what communication
  //. protocols a client understands (via Trading Service ?)
  //. FIXME: Stefan, what communication protocol are you talking about here?
  //.        Some compound document protocols?

  interface DesktopKit : Kit
    {
      /*
       * all names subject to change
       */
      //. FIXME: What's this? The Rootwindow in X terminology? -- tobias
      Desktop desk();
      //. Get the decorations for a normal application Window.
      //. It will wrap the given Controller. A graphic is not sufficient,
      //. as the contents of a Window must be able to react to Events.
      //. The ClientContext provides a way to obtain application
      //. meta-data, including such things as titles, icons, etc.
      Window  shell(in Controller g, in ClientContext n);
      //. Get the decorations for a transient Window.
      //. It will wrap the given Controller. A graphic is not sufficient,
      //. as the contents of a Window must be able to react to Events.
      //. FIXME: We need to pass a text, icon, etc. too. -- tobias
      Window  transient(in Controller g);
      //. Get the decorations for a pulldown Window.
      //. It will wrap the given Controller. A graphic is not sufficient,
      //. as the contents of a Window must be able to react to Events.	
      //. FIXME: We need to pass a text, icon, etc. too. -- tobias
      Window  pulldown(in Controller g);

      //. Get a Command that can be used to move the given Window.
      Command move(in Window w);
      //. Get a Command that can be used to resize the given Window.
      Command resize(in Window w);
      //. Get a Command that can be used to move and resize the given Window.
      Command move_resize(in Window w, in Alignment x, in Alignment y, in short b);
      //. Get a Command that can be used to relayer the given Window (move
      //. it in the window stack).
      Command relayer(in Window w);
      //. Get a Command that can be used to map/unmap a Window. This will
      //. make it display (mapped) or stop it from doing so (unmapped).
      //. The given flag selects which Command is returned: If set you
      //. will get a Mapper, if unset you will get an Unmapper.
      //. FIXME: I'd think map(in Window) and unmap(in Window) would be
      //.        nicer then this. -- tobias
      Command map(in Window w, in boolean f);
    };
};

#endif
