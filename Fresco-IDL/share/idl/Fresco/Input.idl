/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Warsaw_Input_idl
#define _Warsaw_Input_idl

#include <Warsaw/Types.idl>

module Warsaw
{
  module Input
    {
      //. The device id. Each logical device has a unique id attached to it
      //. which is used by events, focus etc.
      typedef unsigned long Device;

      //. A set of flags (max. 32).
      typedef unsigned long Bitset;

      //. The generalization of keys and mouse buttons.
      struct Toggle
      {
	//. What happened?
	enum type {press, hold, release} actuation;
	//. To which button or key did it happen?
	unsigned long number;
      };

      //. Positional events have one...
      typedef Vertex        Position;

      //. Also possible: simple value input
      typedef double        Value;

      //. The actual attributes; the concrete type is discriminated by these.
      enum Discriminator { telltale, key, button, positional, valuation };

      //. The data associated with these attributes of Discriminator.
      union Payload switch (Discriminator)
	{
	case telltale: Bitset state;
	case key:
	case button: Toggle selection;
	case positional: Position location;
	case valuation: Value val;
	};
      
      //. Items form the actual Event.
      struct Item
      {
	  Device dev; //.< The device id, aka. Where did it happen?
	  Payload attr; //.< The Payload, aka. What happened?
      };
      //. An event is simply a sequence of items.
      typedef sequence<Input::Item> Event;

      //. An event filter controls the routing of events.
      //. FIXME: Need more informations on this...
      interface Filter
	{
	  boolean handle(in Event e);
	};
    };
};

#endif
