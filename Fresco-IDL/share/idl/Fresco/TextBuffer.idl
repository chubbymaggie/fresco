/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@fresco.org> ,
 *               2001 Tobias Hunger <tobias@fresco.org>
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_TextBuffer_idl
#define _Fresco_TextBuffer_idl

#include <Fresco/Subject.idl>
#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

module Fresco
{
  //. The TextBuffer is used to store Unicode encoded strings of text.
  //. It can be observed by other Objects which gets notified whenever
  //. the string is changed.
  interface TextBuffer : Subject
    {
      
      //. These are the changes that can happen to a TextBuffer:
      enum ChangeType {insert, remove, cursor};

      //. This structure is passed to observers whenever the
      //. TextBuffer changed.
      struct Change
      {
	  ChangeType type;    //.< What happened?
	  unsigned long pos;  //.< Where did it happen?
	  long len;           //.< How long was the change? This might be a negative number.
      };
 
      //. The length of the TextBuffer.
      readonly attribute unsigned long size;
      //. The contents of the TextBuffer.
      readonly attribute Unistring value;
      //. Return or set the position of the cursor. The number gives
      //. the position of the character in front of which the cursor is.
      //.
      //. If you *set* the position a TextChange will be generated and
      //. passed to all observers of this TextBuffer. It will have a len of
      //. 0 and be of type cursor. pos will contain the new position.
      attribute unsigned long position;
      //. Get a substring of the TextBuffer starting at pos
      //. that is len characters long.
      Unistring get_chars(in unsigned long pos, in unsigned long len);
      //. Move the cursor forward for one character.
      void forward();
      //. Move the cursor backwards for one character.
      void backward();
      //. Shift the gap reserved for inserting new characters. When editing
      //. we reserve a gap to hold new characters so not every insertion of
      //. a new char forces us to move the following existent characters.
      void shift(in long d);
      //. Insert a character in front of the current position into the
      //. TextBuffer. You can only insert characters below 0xFFFF, you will
      //. need to insert a surrogate pair with insert_string() if you need
      //. characters above that.
      //. 
      //. The current position is right behind the inserted character once this
      //. operation is finished.
      //.
      //. The TextChange that will be passed around after the insertion will
      //. always have a length of 1, the pos field will be the cursor position
      //. *before* the insertion and the type will be insert.
      void insert_char(in Unichar u);
      //. Insert a string into the Buffer before the current position.
      //. It gets inserted at the current cursor position.
      //.
      //. The current position is right behind the inserted string once this
      //. operation is finished.
      //.
      //. The TextChange that will be passed around after the insertion will
      //. always have a positive length, the pos field will be the cursor
      //. position *before* the insertion and the type will be insert.
      void insert_string(in Unistring u);
      //. Remove d characters backward. This is relative to the current position.
      //.
      //. The TextChange that will be passed around after the removal will
      //. always have a *negative* length, the pos field will be the cursor
      //. position *before* the removal and the type will be remove.
      void remove_backward(in unsigned long d);
      //. Remove d characters forward. This is relative to the current position.
      //.
      //. The TextChange that will be passed around after the removal will
      //. always have a *positive* length, the pos field will be the cursor
      //. position *before* the removal and the type will be remove.
      void remove_forward(in unsigned long d);
      //. Clear the buffer. It will be empty afterwards.
      void clear();
    };
};

#endif
