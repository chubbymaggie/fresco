/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 1998 Graydon Hoare <graydon@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Fresco_ClientContext_idl
#define _Fresco_ClientContext_idl

#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

module Fresco
{
  interface Command;

  //. A ClientContext object is an interface any client connecting to a
  //. Berlin server needs to present/implement. It is used in managing the
  //. resources the client allocates and in authenticating the client's
  //. requests. The default security mechanism is obviously rediculously
  //. simplistic: Each connection request will be accepted for now.
  interface ClientContext
    {
      //. The name of the user that started the client. This is the
      //. login name of the user, not his real name.
      readonly attribute Unistring user_name;

      //. The application title; later this may be accessed in its own
      //. interface, enabling multi-application ClientContexts and
      //. applications to (reliably) span multiple ClientContexts.
      readonly attribute Unistring application_title;

      //. The command called when the server wants the client to quit
      //. (for example in response to the user clicking on the close button
      //. in a windows titlebar).
      Command exit();
      // When the server tries to call this, and it fails, the server will 
      // most likely destroy your ServerContext object, which will
      // decrement all the refcounts on objects you allocated.
      void ping(); 
      
      // .. additional security-related topics should show up in here  
    };
};

#endif
