/*$Id$
 *
 * This source file is a part of the Fresco Project.
 * Copyright (C) 2000 Niklas Elmqvist <elm@3dwm.org>
 * Copyright (C) 2001 Stefan Seefeld <stefan@fresco.org> 
 * http://www.fresco.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Fresco_Primitive_idl
#define _Fresco_Primitive_idl

#include <Fresco/Graphic.idl>
#include <Fresco/Types.idl>

#pragma prefix "fresco.org"

//. These interfaces define simple 3-dimensional objects (so called
//. primitives) that can get put into the scenegraph.

//. These interfaces are not completly implemented yet and are more or
//. less a skeleton of what will be there some day.

//. FIXME: Document me!
module Primitive
{
  //. This interface is the base of all other primitives defined here.
  interface PrimitiveBase : Fresco::Graphic
  {
    //attribute Fresco::Rasters textures;
    //attribute Fresco::MaterialAttr material;
    //attribute TextureMode texmode;

    void resize();
  };

  //. This defines a sphere.
  interface Sphere : PrimitiveBase
  {
    //. The origin of the sphere.
    attribute Fresco::Vertex position;
    //. The radius of the sphere.
    attribute Fresco::Coord radius;
  };
  
  //. This defines a 'rectangular parallelepiped' or Box for short:-)
  interface Box : PrimitiveBase
  {
    attribute Fresco::Vertex pt1, pt2;
  };
    
  //. This defines a 'terahedron' or (foursided) Pyramid for short:-)
  interface Pyramid : PrimitiveBase
  {
    attribute Fresco::Vertex pt1, pt2;
    attribute Fresco::Coord height;
  };
    
  //. This defines a Cone.
  interface Cone : PrimitiveBase
  {
    // FIXME: Wouldn't be Coord height instead of Vertex top more
    //        consistent with the definition of Pyramid?
    attribute Fresco::Vertex base, top;
    attribute Fresco::Coord radius;
  };
    
  /*
  // Static geometry cannot be altered once created. This allows for
  // some useful optimizations in some contexts (such as using
  // display lists or CVAs in OpenGL).
  interface StaticGeometry : PrimitiveBase
  {
  Vertices getVertices();
  };
  
  interface StaticTriangleGeometry : StaticGeometry {};
  */
    
  interface Geometry : PrimitiveBase
    {
      attribute Fresco::Mesh mesh;
    };

//   interface PointGeometry : Geometry { };    

//   interface LineGeometry : Geometry
//   {
//     struct Line
//     {
//       long a, b;
//     };
//     typedef sequence<Line> Lines;	  
//     attribute long linenumber;
      
//     void setLine(in long index, in Line l);
//     Line getLine(in long index) raises (OutOfRange);
      
//     void setLines(in long index, in Lines ls);
//     Lines getLines(in long index, in long len) raises (OutOfRange);
//   };
    
//   interface TriangleGeometry : Geometry
//   {
//     struct Triangle
//     {
//       long a, b, c;
//     };
    
//     attribute long trianglenumber;
      
//     void setTriangle(in long index, in Triangle t);
//     Triangle getTriangle(in long index);
    
//     void setTexCoord(in long index, in Fresco::TexCoord tc);
//     Fresco::TexCoord getTexCoord(in long index) raises (OutOfRange);
    
//     void setTexCoords(in long index, in Fresco::TexCoords tcs);
//     Fresco::TexCoords getTexCoords(in long index, in long len)
//       raises (OutOfRange);
    
//     void setNormal(in long index, in Fresco::Vertex n);
//     Fresco::Vertex getNormal(in long index);
    
//     void setNormals(in long index, in Fresco::Vertices ns);
//     Fresco::Vertices getNormals(in long index, in long len) raises (OutOfRange);
//   };
  
};

#endif
