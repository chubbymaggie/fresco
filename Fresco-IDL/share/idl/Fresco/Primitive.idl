/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 2000 Niklas Elmqvist <elm@3dwm.org>
 * Copyright (C) 2001 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Primitive_idl
#define _Primitive_idl

#include <Warsaw/Graphic.idl>
#include <Warsaw/Types.idl>

module Primitive
{

  interface PrimitiveBase : Warsaw::Graphic
  {
//     attribute Warsaw::Rasters textures;
//     attribute Warsaw::MaterialAttr material;
    //attribute TextureMode texmode;
    
    void resize();
  };

  interface Sphere : PrimitiveBase
  {
    attribute Warsaw::Vertex position;
    attribute Warsaw::Coord radius;
  };
  
  // "Rectangular parallelepiped" is the correct name, but it is
  // horribly long and complex.
  interface Box : PrimitiveBase
  {
    attribute Warsaw::Vertex pt1, pt2;
  };
    
  // Again, we should use "tetrahedron", but it is too obscure.
  interface Pyramid : PrimitiveBase
  {
    attribute Warsaw::Vertex pt1, pt2;
    attribute Warsaw::Coord height;
  };
    
  interface Cone : PrimitiveBase
  {
    attribute Warsaw::Vertex base, top;
    attribute Warsaw::Coord radius;
  };
    
  /*
  // Static geometry cannot be altered once created. This allows for
  // some useful optimizations in some contexts (such as using
  // display lists or CVAs in OpenGL).
  interface StaticGeometry : PrimitiveBase
  {
  Vertices getVertices();
  };
  
  interface StaticTriangleGeometry : StaticGeometry {};
  */
    
//   interface Geometry : PrimitiveBase
//   {
    
//     exception OutOfRange { };
//     attribute long vertexnumber;  
//     void setVertex(in long index, in Warsaw::Vertex v);
//     Warsaw::Vertex getVertex(in long index) raises (OutOfRange);
//     void setVertices(in long index, in Warsaw::Vertices vs);
//     Warsaw::Vertices getVertices(in long index, in long len) raises (OutOfRange);
//   };

//   interface PointGeometry : Geometry { };    

//   interface LineGeometry : Geometry
//   {
//     struct Line
//     {
//       long a, b;
//     };
//     typedef sequence<Line> Lines;	  
//     attribute long linenumber;
      
//     void setLine(in long index, in Line l);
//     Line getLine(in long index) raises (OutOfRange);
      
//     void setLines(in long index, in Lines ls);
//     Lines getLines(in long index, in long len) raises (OutOfRange);
//   };
    
//   interface TriangleGeometry : Geometry
//   {
//     struct Triangle
//     {
//       long a, b, c;
//     };
    
//     attribute long trianglenumber;
      
//     void setTriangle(in long index, in Triangle t);
//     Triangle getTriangle(in long index);
    
//     void setTexCoord(in long index, in Warsaw::TexCoord tc);
//     Warsaw::TexCoord getTexCoord(in long index) raises (OutOfRange);
    
//     void setTexCoords(in long index, in Warsaw::TexCoords tcs);
//     Warsaw::TexCoords getTexCoords(in long index, in long len)
//       raises (OutOfRange);
    
//     void setNormal(in long index, in Warsaw::Vertex n);
//     Warsaw::Vertex getNormal(in long index);
    
//     void setNormals(in long index, in Warsaw::Vertices ns);
//     Warsaw::Vertices getNormals(in long index, in long len) raises (OutOfRange);
//   };
  
};

#endif
