/*$Id$
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Telltale_idl
#define _Telltale_idl

#include <Warsaw/Subject.idl>

module Warsaw
{
  interface TelltaleConstraint;

  //. A telltale reflects the current state of a bitset
  //. in terms of a set of flags that are on or off.
  interface Telltale : Subject
    {
      //. A Telltale can have at most 32 bits. Mask is used to address them.
      //. It is a bitmask that can select zero, one or more flags at once.
      typedef unsigned long Mask;

      // Used to set and readout the TelltaleConstraint Object used by this
      // Telltale.
      attribute TelltaleConstraint constraint;
      //. Turn on the given flag(s) on.
      void set(in Mask m);
      //. Turn the given flag(s) off.
      void clear(in Mask m);
      //. Return true if all given flags are currently set.
      boolean test(in Mask m);
      //. Subtract or add the masked bits, depending on the flag. This
      //. method is useful in the context of constraints, where 'set' can't
      //. be called directly, but instead has to ask a constraint to do the
      //. necessary changes before it can call modify on this telltale
      void modify(in Mask m, in boolean b);
    };

  interface TelltaleConstraint : RefCountBase
    {
      //. Add a Telltale for which this constraint is enforced
      void add(in Telltale t);
      //. Remove a Telltale from the list of Telltales for which
      //. this constraint enforces restrictions.
      void remove(in Telltale t);
      //. This is called by the set() and clear() function of the
      //. Telltale that uses this constraint. Here is where the
      //. actual constraint is implemented.
      void trymodify(in Telltale t, in Telltale::Mask m, in boolean b);
    };
};

#endif
